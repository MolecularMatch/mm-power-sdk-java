/*
 * MolecularMatch MMPower
 * MMPower API
 *
 * OpenAPI spec version: 1.0.0
 * Contact: support@molecularmatch.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.client.model.AssertionClassifications;
import io.swagger.client.model.AssertionPrevalence;
import io.swagger.client.model.AssertionSources;
import io.swagger.client.model.AssertionTags;
import io.swagger.client.model.AssertionTherapeuticContext;
import io.swagger.client.model.AssertionTiers;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
/**
 * Assertion
 */


public class Assertion {
  @SerializedName("id")
  private String id = null;

  @SerializedName("external_id")
  private List<String> externalId = null;

  @SerializedName("uniqueKey")
  private String uniqueKey = null;

  @SerializedName("hashKey")
  private String hashKey = null;

  @SerializedName("description")
  private String description = null;

  @SerializedName("narrative")
  private String narrative = null;

  @SerializedName("regulatoryBody")
  private String regulatoryBody = null;

  @SerializedName("customer")
  private String customer = null;

  @SerializedName("version")
  private Integer version = null;

  @SerializedName("regulatoryBodyApproved")
  private Boolean regulatoryBodyApproved = null;

  @SerializedName("regulatoryBodyApprovedBy")
  private String regulatoryBodyApprovedBy = null;

  @SerializedName("direction")
  private String direction = null;

  @SerializedName("guidelineBody")
  private String guidelineBody = null;

  @SerializedName("guidelineVersion")
  private String guidelineVersion = null;

  @SerializedName("clinicalSignificance")
  private String clinicalSignificance = null;

  @SerializedName("biomarkerClass")
  private String biomarkerClass = null;

  @SerializedName("expression")
  private String expression = null;

  @SerializedName("tags")
  private List<AssertionTags> tags = null;

  @SerializedName("sources")
  private List<AssertionSources> sources = null;

  @SerializedName("noTherapyAvailable")
  private Boolean noTherapyAvailable = null;

  @SerializedName("therapeuticContext")
  private List<AssertionTherapeuticContext> therapeuticContext = null;

  @SerializedName("tiers")
  private List<AssertionTiers> tiers = null;

  @SerializedName("releasedTiers")
  private List<AssertionTiers> releasedTiers = null;

  @SerializedName("classifications")
  private List<AssertionClassifications> classifications = null;

  @SerializedName("prevalence")
  private List<AssertionPrevalence> prevalence = null;

  public Assertion id(String id) {
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @Schema(required = true, description = "")
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }

  public Assertion externalId(List<String> externalId) {
    this.externalId = externalId;
    return this;
  }

  public Assertion addExternalIdItem(String externalIdItem) {
    if (this.externalId == null) {
      this.externalId = new ArrayList<String>();
    }
    this.externalId.add(externalIdItem);
    return this;
  }

   /**
   * Get externalId
   * @return externalId
  **/
  @Schema(description = "")
  public List<String> getExternalId() {
    return externalId;
  }

  public void setExternalId(List<String> externalId) {
    this.externalId = externalId;
  }

  public Assertion uniqueKey(String uniqueKey) {
    this.uniqueKey = uniqueKey;
    return this;
  }

   /**
   * Get uniqueKey
   * @return uniqueKey
  **/
  @Schema(required = true, description = "")
  public String getUniqueKey() {
    return uniqueKey;
  }

  public void setUniqueKey(String uniqueKey) {
    this.uniqueKey = uniqueKey;
  }

  public Assertion hashKey(String hashKey) {
    this.hashKey = hashKey;
    return this;
  }

   /**
   * Get hashKey
   * @return hashKey
  **/
  @Schema(required = true, description = "")
  public String getHashKey() {
    return hashKey;
  }

  public void setHashKey(String hashKey) {
    this.hashKey = hashKey;
  }

  public Assertion description(String description) {
    this.description = description;
    return this;
  }

   /**
   * Get description
   * @return description
  **/
  @Schema(description = "")
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }

  public Assertion narrative(String narrative) {
    this.narrative = narrative;
    return this;
  }

   /**
   * A human readeable narrative describing the assertion.
   * @return narrative
  **/
  @Schema(description = "A human readeable narrative describing the assertion.")
  public String getNarrative() {
    return narrative;
  }

  public void setNarrative(String narrative) {
    this.narrative = narrative;
  }

  public Assertion regulatoryBody(String regulatoryBody) {
    this.regulatoryBody = regulatoryBody;
    return this;
  }

   /**
   * The regulatory body that has governance over this assertion.
   * @return regulatoryBody
  **/
  @Schema(required = true, description = "The regulatory body that has governance over this assertion.")
  public String getRegulatoryBody() {
    return regulatoryBody;
  }

  public void setRegulatoryBody(String regulatoryBody) {
    this.regulatoryBody = regulatoryBody;
  }

  public Assertion customer(String customer) {
    this.customer = customer;
    return this;
  }

   /**
   * The customer identifier that has governance over this assertion.
   * @return customer
  **/
  @Schema(required = true, description = "The customer identifier that has governance over this assertion.")
  public String getCustomer() {
    return customer;
  }

  public void setCustomer(String customer) {
    this.customer = customer;
  }

  public Assertion version(Integer version) {
    this.version = version;
    return this;
  }

   /**
   * The assertion set version number.
   * @return version
  **/
  @Schema(required = true, description = "The assertion set version number.")
  public Integer getVersion() {
    return version;
  }

  public void setVersion(Integer version) {
    this.version = version;
  }

  public Assertion regulatoryBodyApproved(Boolean regulatoryBodyApproved) {
    this.regulatoryBodyApproved = regulatoryBodyApproved;
    return this;
  }

   /**
   * If true, this assertion&#x27;s therapuetic context has regulatory approval.
   * @return regulatoryBodyApproved
  **/
  @Schema(description = "If true, this assertion's therapuetic context has regulatory approval.")
  public Boolean isRegulatoryBodyApproved() {
    return regulatoryBodyApproved;
  }

  public void setRegulatoryBodyApproved(Boolean regulatoryBodyApproved) {
    this.regulatoryBodyApproved = regulatoryBodyApproved;
  }

  public Assertion regulatoryBodyApprovedBy(String regulatoryBodyApprovedBy) {
    this.regulatoryBodyApprovedBy = regulatoryBodyApprovedBy;
    return this;
  }

   /**
   * Get regulatoryBodyApprovedBy
   * @return regulatoryBodyApprovedBy
  **/
  @Schema(description = "")
  public String getRegulatoryBodyApprovedBy() {
    return regulatoryBodyApprovedBy;
  }

  public void setRegulatoryBodyApprovedBy(String regulatoryBodyApprovedBy) {
    this.regulatoryBodyApprovedBy = regulatoryBodyApprovedBy;
  }

  public Assertion direction(String direction) {
    this.direction = direction;
    return this;
  }

   /**
   * Get direction
   * @return direction
  **/
  @Schema(description = "")
  public String getDirection() {
    return direction;
  }

  public void setDirection(String direction) {
    this.direction = direction;
  }

  public Assertion guidelineBody(String guidelineBody) {
    this.guidelineBody = guidelineBody;
    return this;
  }

   /**
   * Get guidelineBody
   * @return guidelineBody
  **/
  @Schema(description = "")
  public String getGuidelineBody() {
    return guidelineBody;
  }

  public void setGuidelineBody(String guidelineBody) {
    this.guidelineBody = guidelineBody;
  }

  public Assertion guidelineVersion(String guidelineVersion) {
    this.guidelineVersion = guidelineVersion;
    return this;
  }

   /**
   * Get guidelineVersion
   * @return guidelineVersion
  **/
  @Schema(description = "")
  public String getGuidelineVersion() {
    return guidelineVersion;
  }

  public void setGuidelineVersion(String guidelineVersion) {
    this.guidelineVersion = guidelineVersion;
  }

  public Assertion clinicalSignificance(String clinicalSignificance) {
    this.clinicalSignificance = clinicalSignificance;
    return this;
  }

   /**
   * Get clinicalSignificance
   * @return clinicalSignificance
  **/
  @Schema(description = "")
  public String getClinicalSignificance() {
    return clinicalSignificance;
  }

  public void setClinicalSignificance(String clinicalSignificance) {
    this.clinicalSignificance = clinicalSignificance;
  }

  public Assertion biomarkerClass(String biomarkerClass) {
    this.biomarkerClass = biomarkerClass;
    return this;
  }

   /**
   * Get biomarkerClass
   * @return biomarkerClass
  **/
  @Schema(description = "")
  public String getBiomarkerClass() {
    return biomarkerClass;
  }

  public void setBiomarkerClass(String biomarkerClass) {
    this.biomarkerClass = biomarkerClass;
  }

  public Assertion expression(String expression) {
    this.expression = expression;
    return this;
  }

   /**
   * Get expression
   * @return expression
  **/
  @Schema(description = "")
  public String getExpression() {
    return expression;
  }

  public void setExpression(String expression) {
    this.expression = expression;
  }

  public Assertion tags(List<AssertionTags> tags) {
    this.tags = tags;
    return this;
  }

  public Assertion addTagsItem(AssertionTags tagsItem) {
    if (this.tags == null) {
      this.tags = new ArrayList<AssertionTags>();
    }
    this.tags.add(tagsItem);
    return this;
  }

   /**
   * Get tags
   * @return tags
  **/
  @Schema(description = "")
  public List<AssertionTags> getTags() {
    return tags;
  }

  public void setTags(List<AssertionTags> tags) {
    this.tags = tags;
  }

  public Assertion sources(List<AssertionSources> sources) {
    this.sources = sources;
    return this;
  }

  public Assertion addSourcesItem(AssertionSources sourcesItem) {
    if (this.sources == null) {
      this.sources = new ArrayList<AssertionSources>();
    }
    this.sources.add(sourcesItem);
    return this;
  }

   /**
   * The supporting evidence for this assertion.
   * @return sources
  **/
  @Schema(description = "The supporting evidence for this assertion.")
  public List<AssertionSources> getSources() {
    return sources;
  }

  public void setSources(List<AssertionSources> sources) {
    this.sources = sources;
  }

  public Assertion noTherapyAvailable(Boolean noTherapyAvailable) {
    this.noTherapyAvailable = noTherapyAvailable;
    return this;
  }

   /**
   * If true, there is no therapy related to this assertion.
   * @return noTherapyAvailable
  **/
  @Schema(description = "If true, there is no therapy related to this assertion.")
  public Boolean isNoTherapyAvailable() {
    return noTherapyAvailable;
  }

  public void setNoTherapyAvailable(Boolean noTherapyAvailable) {
    this.noTherapyAvailable = noTherapyAvailable;
  }

  public Assertion therapeuticContext(List<AssertionTherapeuticContext> therapeuticContext) {
    this.therapeuticContext = therapeuticContext;
    return this;
  }

  public Assertion addTherapeuticContextItem(AssertionTherapeuticContext therapeuticContextItem) {
    if (this.therapeuticContext == null) {
      this.therapeuticContext = new ArrayList<AssertionTherapeuticContext>();
    }
    this.therapeuticContext.add(therapeuticContextItem);
    return this;
  }

   /**
   * The therapies associated with this assertion.
   * @return therapeuticContext
  **/
  @Schema(description = "The therapies associated with this assertion.")
  public List<AssertionTherapeuticContext> getTherapeuticContext() {
    return therapeuticContext;
  }

  public void setTherapeuticContext(List<AssertionTherapeuticContext> therapeuticContext) {
    this.therapeuticContext = therapeuticContext;
  }

  public Assertion tiers(List<AssertionTiers> tiers) {
    this.tiers = tiers;
    return this;
  }

  public Assertion addTiersItem(AssertionTiers tiersItem) {
    if (this.tiers == null) {
      this.tiers = new ArrayList<AssertionTiers>();
    }
    this.tiers.add(tiersItem);
    return this;
  }

   /**
   * Get tiers
   * @return tiers
  **/
  @Schema(description = "")
  public List<AssertionTiers> getTiers() {
    return tiers;
  }

  public void setTiers(List<AssertionTiers> tiers) {
    this.tiers = tiers;
  }

  public Assertion releasedTiers(List<AssertionTiers> releasedTiers) {
    this.releasedTiers = releasedTiers;
    return this;
  }

  public Assertion addReleasedTiersItem(AssertionTiers releasedTiersItem) {
    if (this.releasedTiers == null) {
      this.releasedTiers = new ArrayList<AssertionTiers>();
    }
    this.releasedTiers.add(releasedTiersItem);
    return this;
  }

   /**
   * Get releasedTiers
   * @return releasedTiers
  **/
  @Schema(description = "")
  public List<AssertionTiers> getReleasedTiers() {
    return releasedTiers;
  }

  public void setReleasedTiers(List<AssertionTiers> releasedTiers) {
    this.releasedTiers = releasedTiers;
  }

  public Assertion classifications(List<AssertionClassifications> classifications) {
    this.classifications = classifications;
    return this;
  }

  public Assertion addClassificationsItem(AssertionClassifications classificationsItem) {
    if (this.classifications == null) {
      this.classifications = new ArrayList<AssertionClassifications>();
    }
    this.classifications.add(classificationsItem);
    return this;
  }

   /**
   * Get classifications
   * @return classifications
  **/
  @Schema(description = "")
  public List<AssertionClassifications> getClassifications() {
    return classifications;
  }

  public void setClassifications(List<AssertionClassifications> classifications) {
    this.classifications = classifications;
  }

  public Assertion prevalence(List<AssertionPrevalence> prevalence) {
    this.prevalence = prevalence;
    return this;
  }

  public Assertion addPrevalenceItem(AssertionPrevalence prevalenceItem) {
    if (this.prevalence == null) {
      this.prevalence = new ArrayList<AssertionPrevalence>();
    }
    this.prevalence.add(prevalenceItem);
    return this;
  }

   /**
   * Get prevalence
   * @return prevalence
  **/
  @Schema(description = "")
  public List<AssertionPrevalence> getPrevalence() {
    return prevalence;
  }

  public void setPrevalence(List<AssertionPrevalence> prevalence) {
    this.prevalence = prevalence;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Assertion assertion = (Assertion) o;
    return Objects.equals(this.id, assertion.id) &&
        Objects.equals(this.externalId, assertion.externalId) &&
        Objects.equals(this.uniqueKey, assertion.uniqueKey) &&
        Objects.equals(this.hashKey, assertion.hashKey) &&
        Objects.equals(this.description, assertion.description) &&
        Objects.equals(this.narrative, assertion.narrative) &&
        Objects.equals(this.regulatoryBody, assertion.regulatoryBody) &&
        Objects.equals(this.customer, assertion.customer) &&
        Objects.equals(this.version, assertion.version) &&
        Objects.equals(this.regulatoryBodyApproved, assertion.regulatoryBodyApproved) &&
        Objects.equals(this.regulatoryBodyApprovedBy, assertion.regulatoryBodyApprovedBy) &&
        Objects.equals(this.direction, assertion.direction) &&
        Objects.equals(this.guidelineBody, assertion.guidelineBody) &&
        Objects.equals(this.guidelineVersion, assertion.guidelineVersion) &&
        Objects.equals(this.clinicalSignificance, assertion.clinicalSignificance) &&
        Objects.equals(this.biomarkerClass, assertion.biomarkerClass) &&
        Objects.equals(this.expression, assertion.expression) &&
        Objects.equals(this.tags, assertion.tags) &&
        Objects.equals(this.sources, assertion.sources) &&
        Objects.equals(this.noTherapyAvailable, assertion.noTherapyAvailable) &&
        Objects.equals(this.therapeuticContext, assertion.therapeuticContext) &&
        Objects.equals(this.tiers, assertion.tiers) &&
        Objects.equals(this.releasedTiers, assertion.releasedTiers) &&
        Objects.equals(this.classifications, assertion.classifications) &&
        Objects.equals(this.prevalence, assertion.prevalence);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, externalId, uniqueKey, hashKey, description, narrative, regulatoryBody, customer, version, regulatoryBodyApproved, regulatoryBodyApprovedBy, direction, guidelineBody, guidelineVersion, clinicalSignificance, biomarkerClass, expression, tags, sources, noTherapyAvailable, therapeuticContext, tiers, releasedTiers, classifications, prevalence);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Assertion {\n");
    
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    externalId: ").append(toIndentedString(externalId)).append("\n");
    sb.append("    uniqueKey: ").append(toIndentedString(uniqueKey)).append("\n");
    sb.append("    hashKey: ").append(toIndentedString(hashKey)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    narrative: ").append(toIndentedString(narrative)).append("\n");
    sb.append("    regulatoryBody: ").append(toIndentedString(regulatoryBody)).append("\n");
    sb.append("    customer: ").append(toIndentedString(customer)).append("\n");
    sb.append("    version: ").append(toIndentedString(version)).append("\n");
    sb.append("    regulatoryBodyApproved: ").append(toIndentedString(regulatoryBodyApproved)).append("\n");
    sb.append("    regulatoryBodyApprovedBy: ").append(toIndentedString(regulatoryBodyApprovedBy)).append("\n");
    sb.append("    direction: ").append(toIndentedString(direction)).append("\n");
    sb.append("    guidelineBody: ").append(toIndentedString(guidelineBody)).append("\n");
    sb.append("    guidelineVersion: ").append(toIndentedString(guidelineVersion)).append("\n");
    sb.append("    clinicalSignificance: ").append(toIndentedString(clinicalSignificance)).append("\n");
    sb.append("    biomarkerClass: ").append(toIndentedString(biomarkerClass)).append("\n");
    sb.append("    expression: ").append(toIndentedString(expression)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("    sources: ").append(toIndentedString(sources)).append("\n");
    sb.append("    noTherapyAvailable: ").append(toIndentedString(noTherapyAvailable)).append("\n");
    sb.append("    therapeuticContext: ").append(toIndentedString(therapeuticContext)).append("\n");
    sb.append("    tiers: ").append(toIndentedString(tiers)).append("\n");
    sb.append("    releasedTiers: ").append(toIndentedString(releasedTiers)).append("\n");
    sb.append("    classifications: ").append(toIndentedString(classifications)).append("\n");
    sb.append("    prevalence: ").append(toIndentedString(prevalence)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
