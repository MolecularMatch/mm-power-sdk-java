/*
 * MolecularMatch MMPower
 * MMPower API
 *
 * OpenAPI spec version: 1.0.0
 * Contact: support@molecularmatch.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.client.model.AssertionFusions;
import io.swagger.client.model.AssertionLocations;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
/**
 * AssertionVariantInfo
 */


public class AssertionVariantInfo {
  @SerializedName("name")
  private String name = null;

  @SerializedName("transcript")
  private String transcript = null;

  @SerializedName("classification")
  private String classification = null;

  @SerializedName("consequences")
  private java.util.List<String> consequences = null;

  @SerializedName("popFreqMax")
  private Float popFreqMax = null;

  @SerializedName("COSMIC_ID")
  private String COSMIC_ID = null;

  @SerializedName("gene")
  private String gene = null;

  @SerializedName("geneFusionPartner")
  private String geneFusionPartner = null;

  @SerializedName("locations")
  private java.util.List<AssertionLocations> locations = null;

  @SerializedName("fusions")
  private java.util.List<AssertionFusions> fusions = null;

  public AssertionVariantInfo name(String name) {
    this.name = name;
    return this;
  }

   /**
   * Get name
   * @return name
  **/
  @Schema(required = true, description = "")
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public AssertionVariantInfo transcript(String transcript) {
    this.transcript = transcript;
    return this;
  }

   /**
   * Get transcript
   * @return transcript
  **/
  @Schema(description = "")
  public String getTranscript() {
    return transcript;
  }

  public void setTranscript(String transcript) {
    this.transcript = transcript;
  }

  public AssertionVariantInfo classification(String classification) {
    this.classification = classification;
    return this;
  }

   /**
   * Get classification
   * @return classification
  **/
  @Schema(description = "")
  public String getClassification() {
    return classification;
  }

  public void setClassification(String classification) {
    this.classification = classification;
  }

  public AssertionVariantInfo consequences(java.util.List<String> consequences) {
    this.consequences = consequences;
    return this;
  }

  public AssertionVariantInfo addConsequencesItem(String consequencesItem) {
    if (this.consequences == null) {
      this.consequences = new java.util.ArrayList<>();
    }
    this.consequences.add(consequencesItem);
    return this;
  }

   /**
   * Get consequences
   * @return consequences
  **/
  @Schema(description = "")
  public java.util.List<String> getConsequences() {
    return consequences;
  }

  public void setConsequences(java.util.List<String> consequences) {
    this.consequences = consequences;
  }

  public AssertionVariantInfo popFreqMax(Float popFreqMax) {
    this.popFreqMax = popFreqMax;
    return this;
  }

   /**
   * Get popFreqMax
   * @return popFreqMax
  **/
  @Schema(description = "")
  public Float getPopFreqMax() {
    return popFreqMax;
  }

  public void setPopFreqMax(Float popFreqMax) {
    this.popFreqMax = popFreqMax;
  }

  public AssertionVariantInfo COSMIC_ID(String COSMIC_ID) {
    this.COSMIC_ID = COSMIC_ID;
    return this;
  }

   /**
   * Get COSMIC_ID
   * @return COSMIC_ID
  **/
  @Schema(description = "")
  public String getCOSMICID() {
    return COSMIC_ID;
  }

  public void setCOSMICID(String COSMIC_ID) {
    this.COSMIC_ID = COSMIC_ID;
  }

  public AssertionVariantInfo gene(String gene) {
    this.gene = gene;
    return this;
  }

   /**
   * Get gene
   * @return gene
  **/
  @Schema(description = "")
  public String getGene() {
    return gene;
  }

  public void setGene(String gene) {
    this.gene = gene;
  }

  public AssertionVariantInfo geneFusionPartner(String geneFusionPartner) {
    this.geneFusionPartner = geneFusionPartner;
    return this;
  }

   /**
   * Get geneFusionPartner
   * @return geneFusionPartner
  **/
  @Schema(description = "")
  public String getGeneFusionPartner() {
    return geneFusionPartner;
  }

  public void setGeneFusionPartner(String geneFusionPartner) {
    this.geneFusionPartner = geneFusionPartner;
  }

  public AssertionVariantInfo locations(java.util.List<AssertionLocations> locations) {
    this.locations = locations;
    return this;
  }

  public AssertionVariantInfo addLocationsItem(AssertionLocations locationsItem) {
    if (this.locations == null) {
      this.locations = new java.util.ArrayList<>();
    }
    this.locations.add(locationsItem);
    return this;
  }

   /**
   * Get locations
   * @return locations
  **/
  @Schema(description = "")
  public java.util.List<AssertionLocations> getLocations() {
    return locations;
  }

  public void setLocations(java.util.List<AssertionLocations> locations) {
    this.locations = locations;
  }

  public AssertionVariantInfo fusions(java.util.List<AssertionFusions> fusions) {
    this.fusions = fusions;
    return this;
  }

  public AssertionVariantInfo addFusionsItem(AssertionFusions fusionsItem) {
    if (this.fusions == null) {
      this.fusions = new java.util.ArrayList<>();
    }
    this.fusions.add(fusionsItem);
    return this;
  }

   /**
   * Get fusions
   * @return fusions
  **/
  @Schema(description = "")
  public java.util.List<AssertionFusions> getFusions() {
    return fusions;
  }

  public void setFusions(java.util.List<AssertionFusions> fusions) {
    this.fusions = fusions;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AssertionVariantInfo assertionVariantInfo = (AssertionVariantInfo) o;
    return Objects.equals(this.name, assertionVariantInfo.name) &&
        Objects.equals(this.transcript, assertionVariantInfo.transcript) &&
        Objects.equals(this.classification, assertionVariantInfo.classification) &&
        Objects.equals(this.consequences, assertionVariantInfo.consequences) &&
        Objects.equals(this.popFreqMax, assertionVariantInfo.popFreqMax) &&
        Objects.equals(this.COSMIC_ID, assertionVariantInfo.COSMIC_ID) &&
        Objects.equals(this.gene, assertionVariantInfo.gene) &&
        Objects.equals(this.geneFusionPartner, assertionVariantInfo.geneFusionPartner) &&
        Objects.equals(this.locations, assertionVariantInfo.locations) &&
        Objects.equals(this.fusions, assertionVariantInfo.fusions);
  }

  @Override
  public int hashCode() {
    return Objects.hash(name, transcript, classification, consequences, popFreqMax, COSMIC_ID, gene, geneFusionPartner, locations, fusions);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AssertionVariantInfo {\n");
    
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    transcript: ").append(toIndentedString(transcript)).append("\n");
    sb.append("    classification: ").append(toIndentedString(classification)).append("\n");
    sb.append("    consequences: ").append(toIndentedString(consequences)).append("\n");
    sb.append("    popFreqMax: ").append(toIndentedString(popFreqMax)).append("\n");
    sb.append("    COSMIC_ID: ").append(toIndentedString(COSMIC_ID)).append("\n");
    sb.append("    gene: ").append(toIndentedString(gene)).append("\n");
    sb.append("    geneFusionPartner: ").append(toIndentedString(geneFusionPartner)).append("\n");
    sb.append("    locations: ").append(toIndentedString(locations)).append("\n");
    sb.append("    fusions: ").append(toIndentedString(fusions)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
