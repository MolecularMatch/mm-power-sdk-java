/*
 * MolecularMatch MMPower
 * MMPower API
 *
 * OpenAPI spec version: 1.0.0
 * Contact: support@molecularmatch.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.client.model.ClinicalTrialArmGroups;
import io.swagger.client.model.ClinicalTrialCountries;
import io.swagger.client.model.ClinicalTrialEligibility;
import io.swagger.client.model.ClinicalTrialInterventions;
import io.swagger.client.model.ClinicalTrialLocations;
import io.swagger.client.model.ClinicalTrialMolecularAlterations;
import io.swagger.client.model.ClinicalTrialOverallContact;
import io.swagger.client.model.ClinicalTrialOverallContactBackup;
import io.swagger.client.model.ClinicalTrialOverallOfficial;
import io.swagger.client.model.ClinicalTrialPrimaryOutcomes;
import io.swagger.client.model.ClinicalTrialSponsors;
import io.swagger.client.model.ClinicalTrialStudyDesign;
import io.swagger.client.model.ClinicalTrialSynonyms;
import io.swagger.client.model.ClinicalTrialTags;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import org.threeten.bp.OffsetDateTime;
/**
 * ClinicalTrial
 */


public class ClinicalTrial {
  @SerializedName("mboost")
  private Float mboost = null;

  @SerializedName("importDate")
  private OffsetDateTime importDate = null;

  @SerializedName("id")
  private String id = null;

  @SerializedName("source")
  private String source = null;

  @SerializedName("briefTitle")
  private String briefTitle = null;

  @SerializedName("patientTitle")
  private String patientTitle = null;

  @SerializedName("title")
  private String title = null;

  @SerializedName("briefSummary")
  private String briefSummary = null;

  @SerializedName("briefSummaryPreserved")
  private String briefSummaryPreserved = null;

  @SerializedName("summary")
  private String summary = null;

  @SerializedName("summaryPreserved")
  private String summaryPreserved = null;

  @SerializedName("status")
  private String status = null;

  @SerializedName("phase")
  private String phase = null;

  @SerializedName("studyType")
  private String studyType = null;

  @SerializedName("studyDesign")
  private ClinicalTrialStudyDesign studyDesign = null;

  @SerializedName("startDate")
  private OffsetDateTime startDate = null;

  @SerializedName("completionDate")
  private OffsetDateTime completionDate = null;

  @SerializedName("firstReceivedDate")
  private OffsetDateTime firstReceivedDate = null;

  @SerializedName("lastChangedDate")
  private OffsetDateTime lastChangedDate = null;

  @SerializedName("verificationDate")
  private OffsetDateTime verificationDate = null;

  @SerializedName("sponsors")
  private List<ClinicalTrialSponsors> sponsors = null;

  @SerializedName("conditions")
  private List<String> conditions = null;

  @SerializedName("interventions")
  private List<ClinicalTrialInterventions> interventions = null;

  @SerializedName("keywords")
  private List<String> keywords = null;

  @SerializedName("armGroups")
  private List<ClinicalTrialArmGroups> armGroups = null;

  @SerializedName("primaryOutcomes")
  private List<ClinicalTrialPrimaryOutcomes> primaryOutcomes = null;

  @SerializedName("secondaryOutcomes")
  private List<ClinicalTrialPrimaryOutcomes> secondaryOutcomes = null;

  @SerializedName("otherOutcomes")
  private List<ClinicalTrialPrimaryOutcomes> otherOutcomes = null;

  @SerializedName("eligibility")
  private ClinicalTrialEligibility eligibility = null;

  @SerializedName("enrollment")
  private Integer enrollment = null;

  @SerializedName("minAge")
  private Float minAge = null;

  @SerializedName("maxAge")
  private Float maxAge = null;

  @SerializedName("gender")
  private List<String> gender = null;

  @SerializedName("overallOfficial")
  private List<ClinicalTrialOverallOfficial> overallOfficial = null;

  @SerializedName("overallContact")
  private ClinicalTrialOverallContact overallContact = null;

  @SerializedName("overallContactBackup")
  private ClinicalTrialOverallContactBackup overallContactBackup = null;

  @SerializedName("locations")
  private List<ClinicalTrialLocations> locations = null;

  @SerializedName("countries")
  private List<ClinicalTrialCountries> countries = null;

  @SerializedName("inclusionCriteria")
  private String inclusionCriteria = null;

  @SerializedName("inclusionCriteriaPreserved")
  private String inclusionCriteriaPreserved = null;

  @SerializedName("exclusionCriteria")
  private String exclusionCriteria = null;

  @SerializedName("exclusionCriteriaPreserved")
  private String exclusionCriteriaPreserved = null;

  @SerializedName("synonyms")
  private List<ClinicalTrialSynonyms> synonyms = null;

  @SerializedName("acronym")
  private String acronym = null;

  @SerializedName("link")
  private String link = null;

  @SerializedName("tags")
  private List<ClinicalTrialTags> tags = null;

  @SerializedName("molecularAlterations")
  private List<ClinicalTrialMolecularAlterations> molecularAlterations = null;

  public ClinicalTrial mboost(Float mboost) {
    this.mboost = mboost;
    return this;
  }

   /**
   * intrinsic boost to the record.
   * @return mboost
  **/
  @Schema(description = "intrinsic boost to the record.")
  public Float getMboost() {
    return mboost;
  }

  public void setMboost(Float mboost) {
    this.mboost = mboost;
  }

  public ClinicalTrial importDate(OffsetDateTime importDate) {
    this.importDate = importDate;
    return this;
  }

   /**
   * date this record was imported into the MolecularMatch database.
   * @return importDate
  **/
  @Schema(description = "date this record was imported into the MolecularMatch database.")
  public OffsetDateTime getImportDate() {
    return importDate;
  }

  public void setImportDate(OffsetDateTime importDate) {
    this.importDate = importDate;
  }

  public ClinicalTrial id(String id) {
    this.id = id;
    return this;
  }

   /**
   * unique identifier.
   * @return id
  **/
  @Schema(required = true, description = "unique identifier.")
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }

  public ClinicalTrial source(String source) {
    this.source = source;
    return this;
  }

   /**
   * native data source of this record
   * @return source
  **/
  @Schema(required = true, description = "native data source of this record")
  public String getSource() {
    return source;
  }

  public void setSource(String source) {
    this.source = source;
  }

  public ClinicalTrial briefTitle(String briefTitle) {
    this.briefTitle = briefTitle;
    return this;
  }

   /**
   * A short title of the clinical study written in language intended for the lay public. The title should include, where possible, information on the participants, condition being evaluated, and intervention(s) studied.
   * @return briefTitle
  **/
  @Schema(description = "A short title of the clinical study written in language intended for the lay public. The title should include, where possible, information on the participants, condition being evaluated, and intervention(s) studied.")
  public String getBriefTitle() {
    return briefTitle;
  }

  public void setBriefTitle(String briefTitle) {
    this.briefTitle = briefTitle;
  }

  public ClinicalTrial patientTitle(String patientTitle) {
    this.patientTitle = patientTitle;
    return this;
  }

   /**
   * Patient friendly title for the clinical trial.
   * @return patientTitle
  **/
  @Schema(description = "Patient friendly title for the clinical trial.")
  public String getPatientTitle() {
    return patientTitle;
  }

  public void setPatientTitle(String patientTitle) {
    this.patientTitle = patientTitle;
  }

  public ClinicalTrial title(String title) {
    this.title = title;
    return this;
  }

   /**
   * Official title for the clinical trial.
   * @return title
  **/
  @Schema(description = "Official title for the clinical trial.")
  public String getTitle() {
    return title;
  }

  public void setTitle(String title) {
    this.title = title;
  }

  public ClinicalTrial briefSummary(String briefSummary) {
    this.briefSummary = briefSummary;
    return this;
  }

   /**
   * A short description of the clinical study, including a brief statement of the clinical study&#x27;s hypothesis, written in language intended for the lay public.
   * @return briefSummary
  **/
  @Schema(description = "A short description of the clinical study, including a brief statement of the clinical study's hypothesis, written in language intended for the lay public.")
  public String getBriefSummary() {
    return briefSummary;
  }

  public void setBriefSummary(String briefSummary) {
    this.briefSummary = briefSummary;
  }

  public ClinicalTrial briefSummaryPreserved(String briefSummaryPreserved) {
    this.briefSummaryPreserved = briefSummaryPreserved;
    return this;
  }

   /**
   * Formatted rendition of the briefSummary.
   * @return briefSummaryPreserved
  **/
  @Schema(description = "Formatted rendition of the briefSummary.")
  public String getBriefSummaryPreserved() {
    return briefSummaryPreserved;
  }

  public void setBriefSummaryPreserved(String briefSummaryPreserved) {
    this.briefSummaryPreserved = briefSummaryPreserved;
  }

  public ClinicalTrial summary(String summary) {
    this.summary = summary;
    return this;
  }

   /**
   * Extended description of the protocol, including more technical information (as compared to the Brief Summary), if desired. Do not include the entire protocol; do not duplicate information recorded in other data elements, such as Eligibility Criteria or outcome measures.
   * @return summary
  **/
  @Schema(description = "Extended description of the protocol, including more technical information (as compared to the Brief Summary), if desired. Do not include the entire protocol; do not duplicate information recorded in other data elements, such as Eligibility Criteria or outcome measures.")
  public String getSummary() {
    return summary;
  }

  public void setSummary(String summary) {
    this.summary = summary;
  }

  public ClinicalTrial summaryPreserved(String summaryPreserved) {
    this.summaryPreserved = summaryPreserved;
    return this;
  }

   /**
   * Formatted rendition of the summary.
   * @return summaryPreserved
  **/
  @Schema(description = "Formatted rendition of the summary.")
  public String getSummaryPreserved() {
    return summaryPreserved;
  }

  public void setSummaryPreserved(String summaryPreserved) {
    this.summaryPreserved = summaryPreserved;
  }

  public ClinicalTrial status(String status) {
    this.status = status;
    return this;
  }

   /**
   * Get status
   * @return status
  **/
  @Schema(description = "")
  public String getStatus() {
    return status;
  }

  public void setStatus(String status) {
    this.status = status;
  }

  public ClinicalTrial phase(String phase) {
    this.phase = phase;
    return this;
  }

   /**
   * For a clinical trial of a drug product (including a biological product), the numerical phase of such clinical trial, consistent with terminology in 21 CFR 312.21 and in 21 CFR 312.85 for phase 4 studies.
   * @return phase
  **/
  @Schema(description = "For a clinical trial of a drug product (including a biological product), the numerical phase of such clinical trial, consistent with terminology in 21 CFR 312.21 and in 21 CFR 312.85 for phase 4 studies.")
  public String getPhase() {
    return phase;
  }

  public void setPhase(String phase) {
    this.phase = phase;
  }

  public ClinicalTrial studyType(String studyType) {
    this.studyType = studyType;
    return this;
  }

   /**
   * The nature of the investigation or investigational use for which clinical study information is being submitted.
   * @return studyType
  **/
  @Schema(description = "The nature of the investigation or investigational use for which clinical study information is being submitted.")
  public String getStudyType() {
    return studyType;
  }

  public void setStudyType(String studyType) {
    this.studyType = studyType;
  }

  public ClinicalTrial studyDesign(ClinicalTrialStudyDesign studyDesign) {
    this.studyDesign = studyDesign;
    return this;
  }

   /**
   * Get studyDesign
   * @return studyDesign
  **/
  @Schema(description = "")
  public ClinicalTrialStudyDesign getStudyDesign() {
    return studyDesign;
  }

  public void setStudyDesign(ClinicalTrialStudyDesign studyDesign) {
    this.studyDesign = studyDesign;
  }

  public ClinicalTrial startDate(OffsetDateTime startDate) {
    this.startDate = startDate;
    return this;
  }

   /**
   * The estimated date on which the clinical study will be open for recruitment of participants, or the actual date on which the first participant was enrolled.
   * @return startDate
  **/
  @Schema(description = "The estimated date on which the clinical study will be open for recruitment of participants, or the actual date on which the first participant was enrolled.")
  public OffsetDateTime getStartDate() {
    return startDate;
  }

  public void setStartDate(OffsetDateTime startDate) {
    this.startDate = startDate;
  }

  public ClinicalTrial completionDate(OffsetDateTime completionDate) {
    this.completionDate = completionDate;
    return this;
  }

   /**
   * The date the final participant was examined or received an intervention for purposes of final collection of data for the primary and secondary outcome measures and adverse events (for example, last participant’s last visit), whether the clinical study concluded according to the pre-specified protocol or was terminated
   * @return completionDate
  **/
  @Schema(description = "The date the final participant was examined or received an intervention for purposes of final collection of data for the primary and secondary outcome measures and adverse events (for example, last participant’s last visit), whether the clinical study concluded according to the pre-specified protocol or was terminated")
  public OffsetDateTime getCompletionDate() {
    return completionDate;
  }

  public void setCompletionDate(OffsetDateTime completionDate) {
    this.completionDate = completionDate;
  }

  public ClinicalTrial firstReceivedDate(OffsetDateTime firstReceivedDate) {
    this.firstReceivedDate = firstReceivedDate;
    return this;
  }

   /**
   * Get firstReceivedDate
   * @return firstReceivedDate
  **/
  @Schema(description = "")
  public OffsetDateTime getFirstReceivedDate() {
    return firstReceivedDate;
  }

  public void setFirstReceivedDate(OffsetDateTime firstReceivedDate) {
    this.firstReceivedDate = firstReceivedDate;
  }

  public ClinicalTrial lastChangedDate(OffsetDateTime lastChangedDate) {
    this.lastChangedDate = lastChangedDate;
    return this;
  }

   /**
   * Get lastChangedDate
   * @return lastChangedDate
  **/
  @Schema(description = "")
  public OffsetDateTime getLastChangedDate() {
    return lastChangedDate;
  }

  public void setLastChangedDate(OffsetDateTime lastChangedDate) {
    this.lastChangedDate = lastChangedDate;
  }

  public ClinicalTrial verificationDate(OffsetDateTime verificationDate) {
    this.verificationDate = verificationDate;
    return this;
  }

   /**
   * The date on which the responsible party last verified the clinical study information in the entire ClinicalTrials.gov record for the clinical study, even if no additional or updated information is being submitted.
   * @return verificationDate
  **/
  @Schema(description = "The date on which the responsible party last verified the clinical study information in the entire ClinicalTrials.gov record for the clinical study, even if no additional or updated information is being submitted.")
  public OffsetDateTime getVerificationDate() {
    return verificationDate;
  }

  public void setVerificationDate(OffsetDateTime verificationDate) {
    this.verificationDate = verificationDate;
  }

  public ClinicalTrial sponsors(List<ClinicalTrialSponsors> sponsors) {
    this.sponsors = sponsors;
    return this;
  }

  public ClinicalTrial addSponsorsItem(ClinicalTrialSponsors sponsorsItem) {
    if (this.sponsors == null) {
      this.sponsors = new ArrayList<ClinicalTrialSponsors>();
    }
    this.sponsors.add(sponsorsItem);
    return this;
  }

   /**
   * Get sponsors
   * @return sponsors
  **/
  @Schema(description = "")
  public List<ClinicalTrialSponsors> getSponsors() {
    return sponsors;
  }

  public void setSponsors(List<ClinicalTrialSponsors> sponsors) {
    this.sponsors = sponsors;
  }

  public ClinicalTrial conditions(List<String> conditions) {
    this.conditions = conditions;
    return this;
  }

  public ClinicalTrial addConditionsItem(String conditionsItem) {
    if (this.conditions == null) {
      this.conditions = new ArrayList<String>();
    }
    this.conditions.add(conditionsItem);
    return this;
  }

   /**
   * Get conditions
   * @return conditions
  **/
  @Schema(description = "")
  public List<String> getConditions() {
    return conditions;
  }

  public void setConditions(List<String> conditions) {
    this.conditions = conditions;
  }

  public ClinicalTrial interventions(List<ClinicalTrialInterventions> interventions) {
    this.interventions = interventions;
    return this;
  }

  public ClinicalTrial addInterventionsItem(ClinicalTrialInterventions interventionsItem) {
    if (this.interventions == null) {
      this.interventions = new ArrayList<ClinicalTrialInterventions>();
    }
    this.interventions.add(interventionsItem);
    return this;
  }

   /**
   * Specifies the intervention(s) associated with each arm or group.
   * @return interventions
  **/
  @Schema(description = "Specifies the intervention(s) associated with each arm or group.")
  public List<ClinicalTrialInterventions> getInterventions() {
    return interventions;
  }

  public void setInterventions(List<ClinicalTrialInterventions> interventions) {
    this.interventions = interventions;
  }

  public ClinicalTrial keywords(List<String> keywords) {
    this.keywords = keywords;
    return this;
  }

  public ClinicalTrial addKeywordsItem(String keywordsItem) {
    if (this.keywords == null) {
      this.keywords = new ArrayList<String>();
    }
    this.keywords.add(keywordsItem);
    return this;
  }

   /**
   * Words or phrases that best describe the protocol. Keywords help users find studies in the database. Use NLM&#x27;s Medical Subject Heading (MeSH)-controlled vocabulary terms where appropriate. Be as specific and precise as possible.
   * @return keywords
  **/
  @Schema(description = "Words or phrases that best describe the protocol. Keywords help users find studies in the database. Use NLM's Medical Subject Heading (MeSH)-controlled vocabulary terms where appropriate. Be as specific and precise as possible.")
  public List<String> getKeywords() {
    return keywords;
  }

  public void setKeywords(List<String> keywords) {
    this.keywords = keywords;
  }

  public ClinicalTrial armGroups(List<ClinicalTrialArmGroups> armGroups) {
    this.armGroups = armGroups;
    return this;
  }

  public ClinicalTrial addArmGroupsItem(ClinicalTrialArmGroups armGroupsItem) {
    if (this.armGroups == null) {
      this.armGroups = new ArrayList<ClinicalTrialArmGroups>();
    }
    this.armGroups.add(armGroupsItem);
    return this;
  }

   /**
   * Pre-specified groups of participants in a clinical trial assigned to receive specific interventions (or no intervention) according to a protocol.
   * @return armGroups
  **/
  @Schema(description = "Pre-specified groups of participants in a clinical trial assigned to receive specific interventions (or no intervention) according to a protocol.")
  public List<ClinicalTrialArmGroups> getArmGroups() {
    return armGroups;
  }

  public void setArmGroups(List<ClinicalTrialArmGroups> armGroups) {
    this.armGroups = armGroups;
  }

  public ClinicalTrial primaryOutcomes(List<ClinicalTrialPrimaryOutcomes> primaryOutcomes) {
    this.primaryOutcomes = primaryOutcomes;
    return this;
  }

  public ClinicalTrial addPrimaryOutcomesItem(ClinicalTrialPrimaryOutcomes primaryOutcomesItem) {
    if (this.primaryOutcomes == null) {
      this.primaryOutcomes = new ArrayList<ClinicalTrialPrimaryOutcomes>();
    }
    this.primaryOutcomes.add(primaryOutcomesItem);
    return this;
  }

   /**
   * Get primaryOutcomes
   * @return primaryOutcomes
  **/
  @Schema(description = "")
  public List<ClinicalTrialPrimaryOutcomes> getPrimaryOutcomes() {
    return primaryOutcomes;
  }

  public void setPrimaryOutcomes(List<ClinicalTrialPrimaryOutcomes> primaryOutcomes) {
    this.primaryOutcomes = primaryOutcomes;
  }

  public ClinicalTrial secondaryOutcomes(List<ClinicalTrialPrimaryOutcomes> secondaryOutcomes) {
    this.secondaryOutcomes = secondaryOutcomes;
    return this;
  }

  public ClinicalTrial addSecondaryOutcomesItem(ClinicalTrialPrimaryOutcomes secondaryOutcomesItem) {
    if (this.secondaryOutcomes == null) {
      this.secondaryOutcomes = new ArrayList<ClinicalTrialPrimaryOutcomes>();
    }
    this.secondaryOutcomes.add(secondaryOutcomesItem);
    return this;
  }

   /**
   * Get secondaryOutcomes
   * @return secondaryOutcomes
  **/
  @Schema(description = "")
  public List<ClinicalTrialPrimaryOutcomes> getSecondaryOutcomes() {
    return secondaryOutcomes;
  }

  public void setSecondaryOutcomes(List<ClinicalTrialPrimaryOutcomes> secondaryOutcomes) {
    this.secondaryOutcomes = secondaryOutcomes;
  }

  public ClinicalTrial otherOutcomes(List<ClinicalTrialPrimaryOutcomes> otherOutcomes) {
    this.otherOutcomes = otherOutcomes;
    return this;
  }

  public ClinicalTrial addOtherOutcomesItem(ClinicalTrialPrimaryOutcomes otherOutcomesItem) {
    if (this.otherOutcomes == null) {
      this.otherOutcomes = new ArrayList<ClinicalTrialPrimaryOutcomes>();
    }
    this.otherOutcomes.add(otherOutcomesItem);
    return this;
  }

   /**
   * Get otherOutcomes
   * @return otherOutcomes
  **/
  @Schema(description = "")
  public List<ClinicalTrialPrimaryOutcomes> getOtherOutcomes() {
    return otherOutcomes;
  }

  public void setOtherOutcomes(List<ClinicalTrialPrimaryOutcomes> otherOutcomes) {
    this.otherOutcomes = otherOutcomes;
  }

  public ClinicalTrial eligibility(ClinicalTrialEligibility eligibility) {
    this.eligibility = eligibility;
    return this;
  }

   /**
   * Get eligibility
   * @return eligibility
  **/
  @Schema(description = "")
  public ClinicalTrialEligibility getEligibility() {
    return eligibility;
  }

  public void setEligibility(ClinicalTrialEligibility eligibility) {
    this.eligibility = eligibility;
  }

  public ClinicalTrial enrollment(Integer enrollment) {
    this.enrollment = enrollment;
    return this;
  }

   /**
   * The estimated total number of participants to be enrolled (target number) or the actual total number of participants that are enrolled in the clinical study.
   * @return enrollment
  **/
  @Schema(description = "The estimated total number of participants to be enrolled (target number) or the actual total number of participants that are enrolled in the clinical study.")
  public Integer getEnrollment() {
    return enrollment;
  }

  public void setEnrollment(Integer enrollment) {
    this.enrollment = enrollment;
  }

  public ClinicalTrial minAge(Float minAge) {
    this.minAge = minAge;
    return this;
  }

   /**
   * The numerical value, if any, for the minimum age a potential participant must meet to be eligible for the clinical study.
   * @return minAge
  **/
  @Schema(required = true, description = "The numerical value, if any, for the minimum age a potential participant must meet to be eligible for the clinical study.")
  public Float getMinAge() {
    return minAge;
  }

  public void setMinAge(Float minAge) {
    this.minAge = minAge;
  }

  public ClinicalTrial maxAge(Float maxAge) {
    this.maxAge = maxAge;
    return this;
  }

   /**
   * The numerical value, if any, for the maximum age a potential participant can be to be eligible for the clinical study.
   * @return maxAge
  **/
  @Schema(required = true, description = "The numerical value, if any, for the maximum age a potential participant can be to be eligible for the clinical study.")
  public Float getMaxAge() {
    return maxAge;
  }

  public void setMaxAge(Float maxAge) {
    this.maxAge = maxAge;
  }

  public ClinicalTrial gender(List<String> gender) {
    this.gender = gender;
    return this;
  }

  public ClinicalTrial addGenderItem(String genderItem) {
    if (this.gender == null) {
      this.gender = new ArrayList<String>();
    }
    this.gender.add(genderItem);
    return this;
  }

   /**
   * The sex and, if applicable, gender of the participants eligible to participate in the clinical study.
   * @return gender
  **/
  @Schema(description = "The sex and, if applicable, gender of the participants eligible to participate in the clinical study.")
  public List<String> getGender() {
    return gender;
  }

  public void setGender(List<String> gender) {
    this.gender = gender;
  }

  public ClinicalTrial overallOfficial(List<ClinicalTrialOverallOfficial> overallOfficial) {
    this.overallOfficial = overallOfficial;
    return this;
  }

  public ClinicalTrial addOverallOfficialItem(ClinicalTrialOverallOfficial overallOfficialItem) {
    if (this.overallOfficial == null) {
      this.overallOfficial = new ArrayList<ClinicalTrialOverallOfficial>();
    }
    this.overallOfficial.add(overallOfficialItem);
    return this;
  }

   /**
   * Person responsible for the overall scientific leadership of the protocol, including study principal investigator.
   * @return overallOfficial
  **/
  @Schema(description = "Person responsible for the overall scientific leadership of the protocol, including study principal investigator.")
  public List<ClinicalTrialOverallOfficial> getOverallOfficial() {
    return overallOfficial;
  }

  public void setOverallOfficial(List<ClinicalTrialOverallOfficial> overallOfficial) {
    this.overallOfficial = overallOfficial;
  }

  public ClinicalTrial overallContact(ClinicalTrialOverallContact overallContact) {
    this.overallContact = overallContact;
    return this;
  }

   /**
   * Get overallContact
   * @return overallContact
  **/
  @Schema(description = "")
  public ClinicalTrialOverallContact getOverallContact() {
    return overallContact;
  }

  public void setOverallContact(ClinicalTrialOverallContact overallContact) {
    this.overallContact = overallContact;
  }

  public ClinicalTrial overallContactBackup(ClinicalTrialOverallContactBackup overallContactBackup) {
    this.overallContactBackup = overallContactBackup;
    return this;
  }

   /**
   * Get overallContactBackup
   * @return overallContactBackup
  **/
  @Schema(description = "")
  public ClinicalTrialOverallContactBackup getOverallContactBackup() {
    return overallContactBackup;
  }

  public void setOverallContactBackup(ClinicalTrialOverallContactBackup overallContactBackup) {
    this.overallContactBackup = overallContactBackup;
  }

  public ClinicalTrial locations(List<ClinicalTrialLocations> locations) {
    this.locations = locations;
    return this;
  }

  public ClinicalTrial addLocationsItem(ClinicalTrialLocations locationsItem) {
    if (this.locations == null) {
      this.locations = new ArrayList<ClinicalTrialLocations>();
    }
    this.locations.add(locationsItem);
    return this;
  }

   /**
   * Get locations
   * @return locations
  **/
  @Schema(description = "")
  public List<ClinicalTrialLocations> getLocations() {
    return locations;
  }

  public void setLocations(List<ClinicalTrialLocations> locations) {
    this.locations = locations;
  }

  public ClinicalTrial countries(List<ClinicalTrialCountries> countries) {
    this.countries = countries;
    return this;
  }

  public ClinicalTrial addCountriesItem(ClinicalTrialCountries countriesItem) {
    if (this.countries == null) {
      this.countries = new ArrayList<ClinicalTrialCountries>();
    }
    this.countries.add(countriesItem);
    return this;
  }

   /**
   * Countries with locations offering this trial.
   * @return countries
  **/
  @Schema(description = "Countries with locations offering this trial.")
  public List<ClinicalTrialCountries> getCountries() {
    return countries;
  }

  public void setCountries(List<ClinicalTrialCountries> countries) {
    this.countries = countries;
  }

  public ClinicalTrial inclusionCriteria(String inclusionCriteria) {
    this.inclusionCriteria = inclusionCriteria;
    return this;
  }

   /**
   * A limited list of criteria for selection of participants in the clinical study, provided in terms of inclusion criteria and suitable for assisting potential participants in identifying clinical studies of interest.
   * @return inclusionCriteria
  **/
  @Schema(description = "A limited list of criteria for selection of participants in the clinical study, provided in terms of inclusion criteria and suitable for assisting potential participants in identifying clinical studies of interest.")
  public String getInclusionCriteria() {
    return inclusionCriteria;
  }

  public void setInclusionCriteria(String inclusionCriteria) {
    this.inclusionCriteria = inclusionCriteria;
  }

  public ClinicalTrial inclusionCriteriaPreserved(String inclusionCriteriaPreserved) {
    this.inclusionCriteriaPreserved = inclusionCriteriaPreserved;
    return this;
  }

   /**
   * Formatted rendition of the inclusionCriteria.
   * @return inclusionCriteriaPreserved
  **/
  @Schema(description = "Formatted rendition of the inclusionCriteria.")
  public String getInclusionCriteriaPreserved() {
    return inclusionCriteriaPreserved;
  }

  public void setInclusionCriteriaPreserved(String inclusionCriteriaPreserved) {
    this.inclusionCriteriaPreserved = inclusionCriteriaPreserved;
  }

  public ClinicalTrial exclusionCriteria(String exclusionCriteria) {
    this.exclusionCriteria = exclusionCriteria;
    return this;
  }

   /**
   * A limited list of criteria for selection of participants in the clinical study, provided in terms of exclusion criteria and suitable for assisting potential participants in identifying clinical studies of interest.
   * @return exclusionCriteria
  **/
  @Schema(description = "A limited list of criteria for selection of participants in the clinical study, provided in terms of exclusion criteria and suitable for assisting potential participants in identifying clinical studies of interest.")
  public String getExclusionCriteria() {
    return exclusionCriteria;
  }

  public void setExclusionCriteria(String exclusionCriteria) {
    this.exclusionCriteria = exclusionCriteria;
  }

  public ClinicalTrial exclusionCriteriaPreserved(String exclusionCriteriaPreserved) {
    this.exclusionCriteriaPreserved = exclusionCriteriaPreserved;
    return this;
  }

   /**
   * Formatted rendition of the exclusionCriteria.
   * @return exclusionCriteriaPreserved
  **/
  @Schema(description = "Formatted rendition of the exclusionCriteria.")
  public String getExclusionCriteriaPreserved() {
    return exclusionCriteriaPreserved;
  }

  public void setExclusionCriteriaPreserved(String exclusionCriteriaPreserved) {
    this.exclusionCriteriaPreserved = exclusionCriteriaPreserved;
  }

  public ClinicalTrial synonyms(List<ClinicalTrialSynonyms> synonyms) {
    this.synonyms = synonyms;
    return this;
  }

  public ClinicalTrial addSynonymsItem(ClinicalTrialSynonyms synonymsItem) {
    if (this.synonyms == null) {
      this.synonyms = new ArrayList<ClinicalTrialSynonyms>();
    }
    this.synonyms.add(synonymsItem);
    return this;
  }

   /**
   * Any identifier other than the organization&#x27;s Unique Protocol Identification Number or the NCT number that is assigned to the clinical study.
   * @return synonyms
  **/
  @Schema(description = "Any identifier other than the organization's Unique Protocol Identification Number or the NCT number that is assigned to the clinical study.")
  public List<ClinicalTrialSynonyms> getSynonyms() {
    return synonyms;
  }

  public void setSynonyms(List<ClinicalTrialSynonyms> synonyms) {
    this.synonyms = synonyms;
  }

  public ClinicalTrial acronym(String acronym) {
    this.acronym = acronym;
    return this;
  }

   /**
   * An acronym or abbreviation used publicly to identify the clinical study.
   * @return acronym
  **/
  @Schema(description = "An acronym or abbreviation used publicly to identify the clinical study.")
  public String getAcronym() {
    return acronym;
  }

  public void setAcronym(String acronym) {
    this.acronym = acronym;
  }

  public ClinicalTrial link(String link) {
    this.link = link;
    return this;
  }

   /**
   * URL to registry listing of this trial.
   * @return link
  **/
  @Schema(description = "URL to registry listing of this trial.")
  public String getLink() {
    return link;
  }

  public void setLink(String link) {
    this.link = link;
  }

  public ClinicalTrial tags(List<ClinicalTrialTags> tags) {
    this.tags = tags;
    return this;
  }

  public ClinicalTrial addTagsItem(ClinicalTrialTags tagsItem) {
    if (this.tags == null) {
      this.tags = new ArrayList<ClinicalTrialTags>();
    }
    this.tags.add(tagsItem);
    return this;
  }

   /**
   * Concept associations established for this trial.
   * @return tags
  **/
  @Schema(description = "Concept associations established for this trial.")
  public List<ClinicalTrialTags> getTags() {
    return tags;
  }

  public void setTags(List<ClinicalTrialTags> tags) {
    this.tags = tags;
  }

  public ClinicalTrial molecularAlterations(List<ClinicalTrialMolecularAlterations> molecularAlterations) {
    this.molecularAlterations = molecularAlterations;
    return this;
  }

  public ClinicalTrial addMolecularAlterationsItem(ClinicalTrialMolecularAlterations molecularAlterationsItem) {
    if (this.molecularAlterations == null) {
      this.molecularAlterations = new ArrayList<ClinicalTrialMolecularAlterations>();
    }
    this.molecularAlterations.add(molecularAlterationsItem);
    return this;
  }

   /**
   * Molecular concept associations established for this trial.
   * @return molecularAlterations
  **/
  @Schema(description = "Molecular concept associations established for this trial.")
  public List<ClinicalTrialMolecularAlterations> getMolecularAlterations() {
    return molecularAlterations;
  }

  public void setMolecularAlterations(List<ClinicalTrialMolecularAlterations> molecularAlterations) {
    this.molecularAlterations = molecularAlterations;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ClinicalTrial clinicalTrial = (ClinicalTrial) o;
    return Objects.equals(this.mboost, clinicalTrial.mboost) &&
        Objects.equals(this.importDate, clinicalTrial.importDate) &&
        Objects.equals(this.id, clinicalTrial.id) &&
        Objects.equals(this.source, clinicalTrial.source) &&
        Objects.equals(this.briefTitle, clinicalTrial.briefTitle) &&
        Objects.equals(this.patientTitle, clinicalTrial.patientTitle) &&
        Objects.equals(this.title, clinicalTrial.title) &&
        Objects.equals(this.briefSummary, clinicalTrial.briefSummary) &&
        Objects.equals(this.briefSummaryPreserved, clinicalTrial.briefSummaryPreserved) &&
        Objects.equals(this.summary, clinicalTrial.summary) &&
        Objects.equals(this.summaryPreserved, clinicalTrial.summaryPreserved) &&
        Objects.equals(this.status, clinicalTrial.status) &&
        Objects.equals(this.phase, clinicalTrial.phase) &&
        Objects.equals(this.studyType, clinicalTrial.studyType) &&
        Objects.equals(this.studyDesign, clinicalTrial.studyDesign) &&
        Objects.equals(this.startDate, clinicalTrial.startDate) &&
        Objects.equals(this.completionDate, clinicalTrial.completionDate) &&
        Objects.equals(this.firstReceivedDate, clinicalTrial.firstReceivedDate) &&
        Objects.equals(this.lastChangedDate, clinicalTrial.lastChangedDate) &&
        Objects.equals(this.verificationDate, clinicalTrial.verificationDate) &&
        Objects.equals(this.sponsors, clinicalTrial.sponsors) &&
        Objects.equals(this.conditions, clinicalTrial.conditions) &&
        Objects.equals(this.interventions, clinicalTrial.interventions) &&
        Objects.equals(this.keywords, clinicalTrial.keywords) &&
        Objects.equals(this.armGroups, clinicalTrial.armGroups) &&
        Objects.equals(this.primaryOutcomes, clinicalTrial.primaryOutcomes) &&
        Objects.equals(this.secondaryOutcomes, clinicalTrial.secondaryOutcomes) &&
        Objects.equals(this.otherOutcomes, clinicalTrial.otherOutcomes) &&
        Objects.equals(this.eligibility, clinicalTrial.eligibility) &&
        Objects.equals(this.enrollment, clinicalTrial.enrollment) &&
        Objects.equals(this.minAge, clinicalTrial.minAge) &&
        Objects.equals(this.maxAge, clinicalTrial.maxAge) &&
        Objects.equals(this.gender, clinicalTrial.gender) &&
        Objects.equals(this.overallOfficial, clinicalTrial.overallOfficial) &&
        Objects.equals(this.overallContact, clinicalTrial.overallContact) &&
        Objects.equals(this.overallContactBackup, clinicalTrial.overallContactBackup) &&
        Objects.equals(this.locations, clinicalTrial.locations) &&
        Objects.equals(this.countries, clinicalTrial.countries) &&
        Objects.equals(this.inclusionCriteria, clinicalTrial.inclusionCriteria) &&
        Objects.equals(this.inclusionCriteriaPreserved, clinicalTrial.inclusionCriteriaPreserved) &&
        Objects.equals(this.exclusionCriteria, clinicalTrial.exclusionCriteria) &&
        Objects.equals(this.exclusionCriteriaPreserved, clinicalTrial.exclusionCriteriaPreserved) &&
        Objects.equals(this.synonyms, clinicalTrial.synonyms) &&
        Objects.equals(this.acronym, clinicalTrial.acronym) &&
        Objects.equals(this.link, clinicalTrial.link) &&
        Objects.equals(this.tags, clinicalTrial.tags) &&
        Objects.equals(this.molecularAlterations, clinicalTrial.molecularAlterations);
  }

  @Override
  public int hashCode() {
    return Objects.hash(mboost, importDate, id, source, briefTitle, patientTitle, title, briefSummary, briefSummaryPreserved, summary, summaryPreserved, status, phase, studyType, studyDesign, startDate, completionDate, firstReceivedDate, lastChangedDate, verificationDate, sponsors, conditions, interventions, keywords, armGroups, primaryOutcomes, secondaryOutcomes, otherOutcomes, eligibility, enrollment, minAge, maxAge, gender, overallOfficial, overallContact, overallContactBackup, locations, countries, inclusionCriteria, inclusionCriteriaPreserved, exclusionCriteria, exclusionCriteriaPreserved, synonyms, acronym, link, tags, molecularAlterations);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ClinicalTrial {\n");
    
    sb.append("    mboost: ").append(toIndentedString(mboost)).append("\n");
    sb.append("    importDate: ").append(toIndentedString(importDate)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    source: ").append(toIndentedString(source)).append("\n");
    sb.append("    briefTitle: ").append(toIndentedString(briefTitle)).append("\n");
    sb.append("    patientTitle: ").append(toIndentedString(patientTitle)).append("\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("    briefSummary: ").append(toIndentedString(briefSummary)).append("\n");
    sb.append("    briefSummaryPreserved: ").append(toIndentedString(briefSummaryPreserved)).append("\n");
    sb.append("    summary: ").append(toIndentedString(summary)).append("\n");
    sb.append("    summaryPreserved: ").append(toIndentedString(summaryPreserved)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    phase: ").append(toIndentedString(phase)).append("\n");
    sb.append("    studyType: ").append(toIndentedString(studyType)).append("\n");
    sb.append("    studyDesign: ").append(toIndentedString(studyDesign)).append("\n");
    sb.append("    startDate: ").append(toIndentedString(startDate)).append("\n");
    sb.append("    completionDate: ").append(toIndentedString(completionDate)).append("\n");
    sb.append("    firstReceivedDate: ").append(toIndentedString(firstReceivedDate)).append("\n");
    sb.append("    lastChangedDate: ").append(toIndentedString(lastChangedDate)).append("\n");
    sb.append("    verificationDate: ").append(toIndentedString(verificationDate)).append("\n");
    sb.append("    sponsors: ").append(toIndentedString(sponsors)).append("\n");
    sb.append("    conditions: ").append(toIndentedString(conditions)).append("\n");
    sb.append("    interventions: ").append(toIndentedString(interventions)).append("\n");
    sb.append("    keywords: ").append(toIndentedString(keywords)).append("\n");
    sb.append("    armGroups: ").append(toIndentedString(armGroups)).append("\n");
    sb.append("    primaryOutcomes: ").append(toIndentedString(primaryOutcomes)).append("\n");
    sb.append("    secondaryOutcomes: ").append(toIndentedString(secondaryOutcomes)).append("\n");
    sb.append("    otherOutcomes: ").append(toIndentedString(otherOutcomes)).append("\n");
    sb.append("    eligibility: ").append(toIndentedString(eligibility)).append("\n");
    sb.append("    enrollment: ").append(toIndentedString(enrollment)).append("\n");
    sb.append("    minAge: ").append(toIndentedString(minAge)).append("\n");
    sb.append("    maxAge: ").append(toIndentedString(maxAge)).append("\n");
    sb.append("    gender: ").append(toIndentedString(gender)).append("\n");
    sb.append("    overallOfficial: ").append(toIndentedString(overallOfficial)).append("\n");
    sb.append("    overallContact: ").append(toIndentedString(overallContact)).append("\n");
    sb.append("    overallContactBackup: ").append(toIndentedString(overallContactBackup)).append("\n");
    sb.append("    locations: ").append(toIndentedString(locations)).append("\n");
    sb.append("    countries: ").append(toIndentedString(countries)).append("\n");
    sb.append("    inclusionCriteria: ").append(toIndentedString(inclusionCriteria)).append("\n");
    sb.append("    inclusionCriteriaPreserved: ").append(toIndentedString(inclusionCriteriaPreserved)).append("\n");
    sb.append("    exclusionCriteria: ").append(toIndentedString(exclusionCriteria)).append("\n");
    sb.append("    exclusionCriteriaPreserved: ").append(toIndentedString(exclusionCriteriaPreserved)).append("\n");
    sb.append("    synonyms: ").append(toIndentedString(synonyms)).append("\n");
    sb.append("    acronym: ").append(toIndentedString(acronym)).append("\n");
    sb.append("    link: ").append(toIndentedString(link)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("    molecularAlterations: ").append(toIndentedString(molecularAlterations)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
