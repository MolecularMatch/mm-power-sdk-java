/*
 * MolecularMatch MMPower
 * MMPower API
 *
 * OpenAPI spec version: 1.0.0
 * Contact: support@molecularmatch.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.client.model.ClinicalTrialLocationSummaryCountries;
import io.swagger.client.model.Facility;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
/**
 * Summary information about the sites offering this trial.
 */
@Schema(description = "Summary information about the sites offering this trial.")

public class ClinicalTrialLocationSummary {
  @SerializedName("us")
  private Boolean us = null;

  @SerializedName("intl")
  private Boolean intl = null;

  @SerializedName("count")
  private Float count = null;

  @SerializedName("recruitingCount")
  private Float recruitingCount = null;

  @SerializedName("countries")
  private java.util.List<ClinicalTrialLocationSummaryCountries> countries = null;

  @SerializedName("nearestDistance")
  private Float nearestDistance = null;

  @SerializedName("nearestLocation")
  private Facility nearestLocation = null;

  public ClinicalTrialLocationSummary us(Boolean us) {
    this.us = us;
    return this;
  }

   /**
   * Indicates if there are United States based locations.
   * @return us
  **/
  @Schema(description = "Indicates if there are United States based locations.")
  public Boolean isUs() {
    return us;
  }

  public void setUs(Boolean us) {
    this.us = us;
  }

  public ClinicalTrialLocationSummary intl(Boolean intl) {
    this.intl = intl;
    return this;
  }

   /**
   * Indicates if there are locations outside of the United States.
   * @return intl
  **/
  @Schema(description = "Indicates if there are locations outside of the United States.")
  public Boolean isIntl() {
    return intl;
  }

  public void setIntl(Boolean intl) {
    this.intl = intl;
  }

  public ClinicalTrialLocationSummary count(Float count) {
    this.count = count;
    return this;
  }

   /**
   * The number of trial sites.
   * @return count
  **/
  @Schema(description = "The number of trial sites.")
  public Float getCount() {
    return count;
  }

  public void setCount(Float count) {
    this.count = count;
  }

  public ClinicalTrialLocationSummary recruitingCount(Float recruitingCount) {
    this.recruitingCount = recruitingCount;
    return this;
  }

   /**
   * The number of trial sites that are recruiting patients.
   * @return recruitingCount
  **/
  @Schema(description = "The number of trial sites that are recruiting patients.")
  public Float getRecruitingCount() {
    return recruitingCount;
  }

  public void setRecruitingCount(Float recruitingCount) {
    this.recruitingCount = recruitingCount;
  }

  public ClinicalTrialLocationSummary countries(java.util.List<ClinicalTrialLocationSummaryCountries> countries) {
    this.countries = countries;
    return this;
  }

  public ClinicalTrialLocationSummary addCountriesItem(ClinicalTrialLocationSummaryCountries countriesItem) {
    if (this.countries == null) {
      this.countries = new java.util.ArrayList<>();
    }
    this.countries.add(countriesItem);
    return this;
  }

   /**
   * Countries with locations offering this trial.
   * @return countries
  **/
  @Schema(description = "Countries with locations offering this trial.")
  public java.util.List<ClinicalTrialLocationSummaryCountries> getCountries() {
    return countries;
  }

  public void setCountries(java.util.List<ClinicalTrialLocationSummaryCountries> countries) {
    this.countries = countries;
  }

  public ClinicalTrialLocationSummary nearestDistance(Float nearestDistance) {
    this.nearestDistance = nearestDistance;
    return this;
  }

   /**
   * The distance to the nearest trial location based on the distance unit of measure specified (miles if unspecified) from the search location (either geopoint, location object, or inferred search point bsaed on filters provided.
   * @return nearestDistance
  **/
  @Schema(description = "The distance to the nearest trial location based on the distance unit of measure specified (miles if unspecified) from the search location (either geopoint, location object, or inferred search point bsaed on filters provided.")
  public Float getNearestDistance() {
    return nearestDistance;
  }

  public void setNearestDistance(Float nearestDistance) {
    this.nearestDistance = nearestDistance;
  }

  public ClinicalTrialLocationSummary nearestLocation(Facility nearestLocation) {
    this.nearestLocation = nearestLocation;
    return this;
  }

   /**
   * Get nearestLocation
   * @return nearestLocation
  **/
  @Schema(description = "")
  public Facility getNearestLocation() {
    return nearestLocation;
  }

  public void setNearestLocation(Facility nearestLocation) {
    this.nearestLocation = nearestLocation;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ClinicalTrialLocationSummary clinicalTrialLocationSummary = (ClinicalTrialLocationSummary) o;
    return Objects.equals(this.us, clinicalTrialLocationSummary.us) &&
        Objects.equals(this.intl, clinicalTrialLocationSummary.intl) &&
        Objects.equals(this.count, clinicalTrialLocationSummary.count) &&
        Objects.equals(this.recruitingCount, clinicalTrialLocationSummary.recruitingCount) &&
        Objects.equals(this.countries, clinicalTrialLocationSummary.countries) &&
        Objects.equals(this.nearestDistance, clinicalTrialLocationSummary.nearestDistance) &&
        Objects.equals(this.nearestLocation, clinicalTrialLocationSummary.nearestLocation);
  }

  @Override
  public int hashCode() {
    return Objects.hash(us, intl, count, recruitingCount, countries, nearestDistance, nearestLocation);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ClinicalTrialLocationSummary {\n");
    
    sb.append("    us: ").append(toIndentedString(us)).append("\n");
    sb.append("    intl: ").append(toIndentedString(intl)).append("\n");
    sb.append("    count: ").append(toIndentedString(count)).append("\n");
    sb.append("    recruitingCount: ").append(toIndentedString(recruitingCount)).append("\n");
    sb.append("    countries: ").append(toIndentedString(countries)).append("\n");
    sb.append("    nearestDistance: ").append(toIndentedString(nearestDistance)).append("\n");
    sb.append("    nearestLocation: ").append(toIndentedString(nearestLocation)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
