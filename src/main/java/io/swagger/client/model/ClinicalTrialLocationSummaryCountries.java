/*
 * MolecularMatch MMPower
 * MMPower API
 *
 * OpenAPI spec version: 1.0.0
 * Contact: support@molecularmatch.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
/**
 * ClinicalTrialLocationSummaryCountries
 */


public class ClinicalTrialLocationSummaryCountries {
  @SerializedName("name")
  private String name = null;

  @SerializedName("regions")
  private java.util.List<String> regions = null;

  @SerializedName("regionCodes")
  private java.util.List<String> regionCodes = null;

  public ClinicalTrialLocationSummaryCountries name(String name) {
    this.name = name;
    return this;
  }

   /**
   * Country name.
   * @return name
  **/
  @Schema(required = true, description = "Country name.")
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public ClinicalTrialLocationSummaryCountries regions(java.util.List<String> regions) {
    this.regions = regions;
    return this;
  }

  public ClinicalTrialLocationSummaryCountries addRegionsItem(String regionsItem) {
    if (this.regions == null) {
      this.regions = new java.util.ArrayList<>();
    }
    this.regions.add(regionsItem);
    return this;
  }

   /**
   * Sub divisions within the country with a trial site.
   * @return regions
  **/
  @Schema(description = "Sub divisions within the country with a trial site.")
  public java.util.List<String> getRegions() {
    return regions;
  }

  public void setRegions(java.util.List<String> regions) {
    this.regions = regions;
  }

  public ClinicalTrialLocationSummaryCountries regionCodes(java.util.List<String> regionCodes) {
    this.regionCodes = regionCodes;
    return this;
  }

  public ClinicalTrialLocationSummaryCountries addRegionCodesItem(String regionCodesItem) {
    if (this.regionCodes == null) {
      this.regionCodes = new java.util.ArrayList<>();
    }
    this.regionCodes.add(regionCodesItem);
    return this;
  }

   /**
   * Sub division codes within the country with a trial site.
   * @return regionCodes
  **/
  @Schema(description = "Sub division codes within the country with a trial site.")
  public java.util.List<String> getRegionCodes() {
    return regionCodes;
  }

  public void setRegionCodes(java.util.List<String> regionCodes) {
    this.regionCodes = regionCodes;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ClinicalTrialLocationSummaryCountries clinicalTrialLocationSummaryCountries = (ClinicalTrialLocationSummaryCountries) o;
    return Objects.equals(this.name, clinicalTrialLocationSummaryCountries.name) &&
        Objects.equals(this.regions, clinicalTrialLocationSummaryCountries.regions) &&
        Objects.equals(this.regionCodes, clinicalTrialLocationSummaryCountries.regionCodes);
  }

  @Override
  public int hashCode() {
    return Objects.hash(name, regions, regionCodes);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ClinicalTrialLocationSummaryCountries {\n");
    
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    regions: ").append(toIndentedString(regions)).append("\n");
    sb.append("    regionCodes: ").append(toIndentedString(regionCodes)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
