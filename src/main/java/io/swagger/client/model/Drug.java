/*
 * MolecularMatch MMPower
 * MMPower API
 *
 * OpenAPI spec version: 1.0.0
 * Contact: support@molecularmatch.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.client.model.Assertion;
import io.swagger.client.model.ConceptAssociation;
import io.swagger.client.model.DrugAvailability;
import io.swagger.client.model.DrugBrands;
import io.swagger.client.model.DrugCompositeTags;
import io.swagger.client.model.DrugDosages;
import io.swagger.client.model.DrugDrugclass;
import io.swagger.client.model.DrugParents;
import io.swagger.client.model.DrugPharmacology;
import io.swagger.client.model.DrugPrices;
import io.swagger.client.model.ExternalId;
import io.swagger.client.model.Synonym;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
/**
 * Drug
 */


public class Drug {
  @SerializedName("_score")
  private Float _score = null;

  @SerializedName("mboost")
  private Float mboost = null;

  @SerializedName("id")
  private String id = null;

  @SerializedName("name")
  private String name = null;

  @SerializedName("alias")
  private String alias = null;

  @SerializedName("description")
  private String description = null;

  @SerializedName("composite")
  private Boolean composite = null;

  @SerializedName("approved")
  private Boolean approved = null;

  @SerializedName("availability")
  private java.util.List<DrugAvailability> availability = null;

  @SerializedName("synonyms")
  private java.util.List<Synonym> synonyms = null;

  @SerializedName("parents")
  private java.util.List<DrugParents> parents = null;

  @SerializedName("drugclass")
  private java.util.List<DrugDrugclass> drugclass = null;

  @SerializedName("compositeTags")
  private java.util.List<DrugCompositeTags> compositeTags = null;

  @SerializedName("brands")
  private java.util.List<DrugBrands> brands = null;

  @SerializedName("externalIds")
  private java.util.List<ExternalId> externalIds = null;

  @SerializedName("link")
  private String link = null;

  @SerializedName("prices")
  private java.util.List<DrugPrices> prices = null;

  @SerializedName("dosages")
  private java.util.List<DrugDosages> dosages = null;

  @SerializedName("pharmacology")
  private DrugPharmacology pharmacology = null;

  @SerializedName("molecularAlterations")
  private java.util.List<ConceptAssociation> molecularAlterations = null;

  @SerializedName("contraindicatedAlterations")
  private java.util.List<ConceptAssociation> contraindicatedAlterations = null;

  @SerializedName("assertions")
  private java.util.List<Assertion> assertions = null;

  @SerializedName("bestTier")
  private String bestTier = null;

  @SerializedName("metTier")
  private String metTier = null;

  public Drug _score(Float _score) {
    this._score = _score;
    return this;
  }

   /**
   * indicator of the quality of the match.  Assertion based therapies will not contain a _score.
   * @return _score
  **/
  @Schema(description = "indicator of the quality of the match.  Assertion based therapies will not contain a _score.")
  public Float getScore() {
    return _score;
  }

  public void setScore(Float _score) {
    this._score = _score;
  }

  public Drug mboost(Float mboost) {
    this.mboost = mboost;
    return this;
  }

   /**
   * intrinsic boost to the record.
   * @return mboost
  **/
  @Schema(description = "intrinsic boost to the record.")
  public Float getMboost() {
    return mboost;
  }

  public void setMboost(Float mboost) {
    this.mboost = mboost;
  }

  public Drug id(String id) {
    this.id = id;
    return this;
  }

   /**
   * unique identifier.
   * @return id
  **/
  @Schema(required = true, description = "unique identifier.")
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }

  public Drug name(String name) {
    this.name = name;
    return this;
  }

   /**
   * The name of the drug.
   * @return name
  **/
  @Schema(required = true, description = "The name of the drug.")
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public Drug alias(String alias) {
    this.alias = alias;
    return this;
  }

   /**
   * The most common name for the drug.
   * @return alias
  **/
  @Schema(description = "The most common name for the drug.")
  public String getAlias() {
    return alias;
  }

  public void setAlias(String alias) {
    this.alias = alias;
  }

  public Drug description(String description) {
    this.description = description;
    return this;
  }

   /**
   * Descriptions of drug properties, treatments, history and regulatory status.
   * @return description
  **/
  @Schema(description = "Descriptions of drug properties, treatments, history and regulatory status.")
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }

  public Drug composite(Boolean composite) {
    this.composite = composite;
    return this;
  }

   /**
   * Indicates whether this drug is a composite of multiple drugs (combination therapy).
   * @return composite
  **/
  @Schema(description = "Indicates whether this drug is a composite of multiple drugs (combination therapy).")
  public Boolean isComposite() {
    return composite;
  }

  public void setComposite(Boolean composite) {
    this.composite = composite;
  }

  public Drug approved(Boolean approved) {
    this.approved = approved;
    return this;
  }

   /**
   * Indicates whether this drug has been approved by any regulating government.
   * @return approved
  **/
  @Schema(required = true, description = "Indicates whether this drug has been approved by any regulating government.")
  public Boolean isApproved() {
    return approved;
  }

  public void setApproved(Boolean approved) {
    this.approved = approved;
  }

  public Drug availability(java.util.List<DrugAvailability> availability) {
    this.availability = availability;
    return this;
  }

  public Drug addAvailabilityItem(DrugAvailability availabilityItem) {
    if (this.availability == null) {
      this.availability = new java.util.ArrayList<>();
    }
    this.availability.add(availabilityItem);
    return this;
  }

   /**
   * Countries or jurisdictions where this drug is available.
   * @return availability
  **/
  @Schema(description = "Countries or jurisdictions where this drug is available.")
  public java.util.List<DrugAvailability> getAvailability() {
    return availability;
  }

  public void setAvailability(java.util.List<DrugAvailability> availability) {
    this.availability = availability;
  }

  public Drug synonyms(java.util.List<Synonym> synonyms) {
    this.synonyms = synonyms;
    return this;
  }

  public Drug addSynonymsItem(Synonym synonymsItem) {
    if (this.synonyms == null) {
      this.synonyms = new java.util.ArrayList<>();
    }
    this.synonyms.add(synonymsItem);
    return this;
  }

   /**
   * Other names or identifiers that are associated with this drug.
   * @return synonyms
  **/
  @Schema(description = "Other names or identifiers that are associated with this drug.")
  public java.util.List<Synonym> getSynonyms() {
    return synonyms;
  }

  public void setSynonyms(java.util.List<Synonym> synonyms) {
    this.synonyms = synonyms;
  }

  public Drug parents(java.util.List<DrugParents> parents) {
    this.parents = parents;
    return this;
  }

  public Drug addParentsItem(DrugParents parentsItem) {
    if (this.parents == null) {
      this.parents = new java.util.ArrayList<>();
    }
    this.parents.add(parentsItem);
    return this;
  }

   /**
   * Get parents
   * @return parents
  **/
  @Schema(description = "")
  public java.util.List<DrugParents> getParents() {
    return parents;
  }

  public void setParents(java.util.List<DrugParents> parents) {
    this.parents = parents;
  }

  public Drug drugclass(java.util.List<DrugDrugclass> drugclass) {
    this.drugclass = drugclass;
    return this;
  }

  public Drug addDrugclassItem(DrugDrugclass drugclassItem) {
    if (this.drugclass == null) {
      this.drugclass = new java.util.ArrayList<>();
    }
    this.drugclass.add(drugclassItem);
    return this;
  }

   /**
   * Get drugclass
   * @return drugclass
  **/
  @Schema(description = "")
  public java.util.List<DrugDrugclass> getDrugclass() {
    return drugclass;
  }

  public void setDrugclass(java.util.List<DrugDrugclass> drugclass) {
    this.drugclass = drugclass;
  }

  public Drug compositeTags(java.util.List<DrugCompositeTags> compositeTags) {
    this.compositeTags = compositeTags;
    return this;
  }

  public Drug addCompositeTagsItem(DrugCompositeTags compositeTagsItem) {
    if (this.compositeTags == null) {
      this.compositeTags = new java.util.ArrayList<>();
    }
    this.compositeTags.add(compositeTagsItem);
    return this;
  }

   /**
   * The individual drugs making up this composite drug
   * @return compositeTags
  **/
  @Schema(description = "The individual drugs making up this composite drug")
  public java.util.List<DrugCompositeTags> getCompositeTags() {
    return compositeTags;
  }

  public void setCompositeTags(java.util.List<DrugCompositeTags> compositeTags) {
    this.compositeTags = compositeTags;
  }

  public Drug brands(java.util.List<DrugBrands> brands) {
    this.brands = brands;
    return this;
  }

  public Drug addBrandsItem(DrugBrands brandsItem) {
    if (this.brands == null) {
      this.brands = new java.util.ArrayList<>();
    }
    this.brands.add(brandsItem);
    return this;
  }

   /**
   * Get brands
   * @return brands
  **/
  @Schema(description = "")
  public java.util.List<DrugBrands> getBrands() {
    return brands;
  }

  public void setBrands(java.util.List<DrugBrands> brands) {
    this.brands = brands;
  }

  public Drug externalIds(java.util.List<ExternalId> externalIds) {
    this.externalIds = externalIds;
    return this;
  }

  public Drug addExternalIdsItem(ExternalId externalIdsItem) {
    if (this.externalIds == null) {
      this.externalIds = new java.util.ArrayList<>();
    }
    this.externalIds.add(externalIdsItem);
    return this;
  }

   /**
   * Identifiers used in other websites or databases providing information about this drug.
   * @return externalIds
  **/
  @Schema(description = "Identifiers used in other websites or databases providing information about this drug.")
  public java.util.List<ExternalId> getExternalIds() {
    return externalIds;
  }

  public void setExternalIds(java.util.List<ExternalId> externalIds) {
    this.externalIds = externalIds;
  }

  public Drug link(String link) {
    this.link = link;
    return this;
  }

   /**
   * DailyMed link for prescription label details.
   * @return link
  **/
  @Schema(description = "DailyMed link for prescription label details.")
  public String getLink() {
    return link;
  }

  public void setLink(String link) {
    this.link = link;
  }

  public Drug prices(java.util.List<DrugPrices> prices) {
    this.prices = prices;
    return this;
  }

  public Drug addPricesItem(DrugPrices pricesItem) {
    if (this.prices == null) {
      this.prices = new java.util.ArrayList<>();
    }
    this.prices.add(pricesItem);
    return this;
  }

   /**
   * Unit drug prices.
   * @return prices
  **/
  @Schema(description = "Unit drug prices.")
  public java.util.List<DrugPrices> getPrices() {
    return prices;
  }

  public void setPrices(java.util.List<DrugPrices> prices) {
    this.prices = prices;
  }

  public Drug dosages(java.util.List<DrugDosages> dosages) {
    this.dosages = dosages;
    return this;
  }

  public Drug addDosagesItem(DrugDosages dosagesItem) {
    if (this.dosages == null) {
      this.dosages = new java.util.ArrayList<>();
    }
    this.dosages.add(dosagesItem);
    return this;
  }

   /**
   * A list of the commercially available dosages of the drug.
   * @return dosages
  **/
  @Schema(description = "A list of the commercially available dosages of the drug.")
  public java.util.List<DrugDosages> getDosages() {
    return dosages;
  }

  public void setDosages(java.util.List<DrugDosages> dosages) {
    this.dosages = dosages;
  }

  public Drug pharmacology(DrugPharmacology pharmacology) {
    this.pharmacology = pharmacology;
    return this;
  }

   /**
   * Get pharmacology
   * @return pharmacology
  **/
  @Schema(description = "")
  public DrugPharmacology getPharmacology() {
    return pharmacology;
  }

  public void setPharmacology(DrugPharmacology pharmacology) {
    this.pharmacology = pharmacology;
  }

  public Drug molecularAlterations(java.util.List<ConceptAssociation> molecularAlterations) {
    this.molecularAlterations = molecularAlterations;
    return this;
  }

  public Drug addMolecularAlterationsItem(ConceptAssociation molecularAlterationsItem) {
    if (this.molecularAlterations == null) {
      this.molecularAlterations = new java.util.ArrayList<>();
    }
    this.molecularAlterations.add(molecularAlterationsItem);
    return this;
  }

   /**
   * Molecular concept associations established for this drug.
   * @return molecularAlterations
  **/
  @Schema(description = "Molecular concept associations established for this drug.")
  public java.util.List<ConceptAssociation> getMolecularAlterations() {
    return molecularAlterations;
  }

  public void setMolecularAlterations(java.util.List<ConceptAssociation> molecularAlterations) {
    this.molecularAlterations = molecularAlterations;
  }

  public Drug contraindicatedAlterations(java.util.List<ConceptAssociation> contraindicatedAlterations) {
    this.contraindicatedAlterations = contraindicatedAlterations;
    return this;
  }

  public Drug addContraindicatedAlterationsItem(ConceptAssociation contraindicatedAlterationsItem) {
    if (this.contraindicatedAlterations == null) {
      this.contraindicatedAlterations = new java.util.ArrayList<>();
    }
    this.contraindicatedAlterations.add(contraindicatedAlterationsItem);
    return this;
  }

   /**
   * Contraindicated Molecular concept associations established for this drug.
   * @return contraindicatedAlterations
  **/
  @Schema(description = "Contraindicated Molecular concept associations established for this drug.")
  public java.util.List<ConceptAssociation> getContraindicatedAlterations() {
    return contraindicatedAlterations;
  }

  public void setContraindicatedAlterations(java.util.List<ConceptAssociation> contraindicatedAlterations) {
    this.contraindicatedAlterations = contraindicatedAlterations;
  }

  public Drug assertions(java.util.List<Assertion> assertions) {
    this.assertions = assertions;
    return this;
  }

  public Drug addAssertionsItem(Assertion assertionsItem) {
    if (this.assertions == null) {
      this.assertions = new java.util.ArrayList<>();
    }
    this.assertions.add(assertionsItem);
    return this;
  }

   /**
   * Evidence in support of this drug.
   * @return assertions
  **/
  @Schema(description = "Evidence in support of this drug.")
  public java.util.List<Assertion> getAssertions() {
    return assertions;
  }

  public void setAssertions(java.util.List<Assertion> assertions) {
    this.assertions = assertions;
  }

  public Drug bestTier(String bestTier) {
    this.bestTier = bestTier;
    return this;
  }

   /**
   * The highest tier evidence associated with this drug.
   * @return bestTier
  **/
  @Schema(description = "The highest tier evidence associated with this drug.")
  public String getBestTier() {
    return bestTier;
  }

  public void setBestTier(String bestTier) {
    this.bestTier = bestTier;
  }

  public Drug metTier(String metTier) {
    this.metTier = metTier;
    return this;
  }

   /**
   * The highest tier evidence associated with this drug where the criteria is fully met based on the search inputs.
   * @return metTier
  **/
  @Schema(description = "The highest tier evidence associated with this drug where the criteria is fully met based on the search inputs.")
  public String getMetTier() {
    return metTier;
  }

  public void setMetTier(String metTier) {
    this.metTier = metTier;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Drug drug = (Drug) o;
    return Objects.equals(this._score, drug._score) &&
        Objects.equals(this.mboost, drug.mboost) &&
        Objects.equals(this.id, drug.id) &&
        Objects.equals(this.name, drug.name) &&
        Objects.equals(this.alias, drug.alias) &&
        Objects.equals(this.description, drug.description) &&
        Objects.equals(this.composite, drug.composite) &&
        Objects.equals(this.approved, drug.approved) &&
        Objects.equals(this.availability, drug.availability) &&
        Objects.equals(this.synonyms, drug.synonyms) &&
        Objects.equals(this.parents, drug.parents) &&
        Objects.equals(this.drugclass, drug.drugclass) &&
        Objects.equals(this.compositeTags, drug.compositeTags) &&
        Objects.equals(this.brands, drug.brands) &&
        Objects.equals(this.externalIds, drug.externalIds) &&
        Objects.equals(this.link, drug.link) &&
        Objects.equals(this.prices, drug.prices) &&
        Objects.equals(this.dosages, drug.dosages) &&
        Objects.equals(this.pharmacology, drug.pharmacology) &&
        Objects.equals(this.molecularAlterations, drug.molecularAlterations) &&
        Objects.equals(this.contraindicatedAlterations, drug.contraindicatedAlterations) &&
        Objects.equals(this.assertions, drug.assertions) &&
        Objects.equals(this.bestTier, drug.bestTier) &&
        Objects.equals(this.metTier, drug.metTier);
  }

  @Override
  public int hashCode() {
    return Objects.hash(_score, mboost, id, name, alias, description, composite, approved, availability, synonyms, parents, drugclass, compositeTags, brands, externalIds, link, prices, dosages, pharmacology, molecularAlterations, contraindicatedAlterations, assertions, bestTier, metTier);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Drug {\n");
    
    sb.append("    _score: ").append(toIndentedString(_score)).append("\n");
    sb.append("    mboost: ").append(toIndentedString(mboost)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    alias: ").append(toIndentedString(alias)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    composite: ").append(toIndentedString(composite)).append("\n");
    sb.append("    approved: ").append(toIndentedString(approved)).append("\n");
    sb.append("    availability: ").append(toIndentedString(availability)).append("\n");
    sb.append("    synonyms: ").append(toIndentedString(synonyms)).append("\n");
    sb.append("    parents: ").append(toIndentedString(parents)).append("\n");
    sb.append("    drugclass: ").append(toIndentedString(drugclass)).append("\n");
    sb.append("    compositeTags: ").append(toIndentedString(compositeTags)).append("\n");
    sb.append("    brands: ").append(toIndentedString(brands)).append("\n");
    sb.append("    externalIds: ").append(toIndentedString(externalIds)).append("\n");
    sb.append("    link: ").append(toIndentedString(link)).append("\n");
    sb.append("    prices: ").append(toIndentedString(prices)).append("\n");
    sb.append("    dosages: ").append(toIndentedString(dosages)).append("\n");
    sb.append("    pharmacology: ").append(toIndentedString(pharmacology)).append("\n");
    sb.append("    molecularAlterations: ").append(toIndentedString(molecularAlterations)).append("\n");
    sb.append("    contraindicatedAlterations: ").append(toIndentedString(contraindicatedAlterations)).append("\n");
    sb.append("    assertions: ").append(toIndentedString(assertions)).append("\n");
    sb.append("    bestTier: ").append(toIndentedString(bestTier)).append("\n");
    sb.append("    metTier: ").append(toIndentedString(metTier)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
