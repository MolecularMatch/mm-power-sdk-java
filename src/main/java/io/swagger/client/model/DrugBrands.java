/*
 * MolecularMatch MMPower
 * MMPower API
 *
 * OpenAPI spec version: 1.0.0
 * Contact: support@molecularmatch.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
/**
 * DrugBrands
 */


public class DrugBrands {
  @SerializedName("primary")
  private Boolean primary = null;

  @SerializedName("compositeKey")
  private String compositeKey = null;

  @SerializedName("indications")
  private String indications = null;

  @SerializedName("mechanism")
  private String mechanism = null;

  @SerializedName("name")
  private String name = null;

  @SerializedName("manufacturer")
  private String manufacturer = null;

  public DrugBrands primary(Boolean primary) {
    this.primary = primary;
    return this;
  }

   /**
   * Get primary
   * @return primary
  **/
  @Schema(description = "")
  public Boolean isPrimary() {
    return primary;
  }

  public void setPrimary(Boolean primary) {
    this.primary = primary;
  }

  public DrugBrands compositeKey(String compositeKey) {
    this.compositeKey = compositeKey;
    return this;
  }

   /**
   * Get compositeKey
   * @return compositeKey
  **/
  @Schema(required = true, description = "")
  public String getCompositeKey() {
    return compositeKey;
  }

  public void setCompositeKey(String compositeKey) {
    this.compositeKey = compositeKey;
  }

  public DrugBrands indications(String indications) {
    this.indications = indications;
    return this;
  }

   /**
   * The approved conditions, diseases, or states for which a drug can safely and effectively be used. An indication is considered to be FDA-approved when it has any of the following designations: NDA, ANDA, BLA, or OTC. May also include indications in other countries, such as Canada (through Health Canada) or in Europe (through the European Medicines Agency).
   * @return indications
  **/
  @Schema(description = "The approved conditions, diseases, or states for which a drug can safely and effectively be used. An indication is considered to be FDA-approved when it has any of the following designations: NDA, ANDA, BLA, or OTC. May also include indications in other countries, such as Canada (through Health Canada) or in Europe (through the European Medicines Agency).")
  public String getIndications() {
    return indications;
  }

  public void setIndications(String indications) {
    this.indications = indications;
  }

  public DrugBrands mechanism(String mechanism) {
    this.mechanism = mechanism;
    return this;
  }

   /**
   * A component of pharmacodynamics that describes the biochemical interaction through which a drug produces its intended effect. May include the exact molecular protein or enzyme targets and/or a description of the physiological effects produced.
   * @return mechanism
  **/
  @Schema(description = "A component of pharmacodynamics that describes the biochemical interaction through which a drug produces its intended effect. May include the exact molecular protein or enzyme targets and/or a description of the physiological effects produced.")
  public String getMechanism() {
    return mechanism;
  }

  public void setMechanism(String mechanism) {
    this.mechanism = mechanism;
  }

  public DrugBrands name(String name) {
    this.name = name;
    return this;
  }

   /**
   * The brand name of the drug
   * @return name
  **/
  @Schema(required = true, description = "The brand name of the drug")
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public DrugBrands manufacturer(String manufacturer) {
    this.manufacturer = manufacturer;
    return this;
  }

   /**
   * The company producing the brand name of drug.
   * @return manufacturer
  **/
  @Schema(required = true, description = "The company producing the brand name of drug.")
  public String getManufacturer() {
    return manufacturer;
  }

  public void setManufacturer(String manufacturer) {
    this.manufacturer = manufacturer;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DrugBrands drugBrands = (DrugBrands) o;
    return Objects.equals(this.primary, drugBrands.primary) &&
        Objects.equals(this.compositeKey, drugBrands.compositeKey) &&
        Objects.equals(this.indications, drugBrands.indications) &&
        Objects.equals(this.mechanism, drugBrands.mechanism) &&
        Objects.equals(this.name, drugBrands.name) &&
        Objects.equals(this.manufacturer, drugBrands.manufacturer);
  }

  @Override
  public int hashCode() {
    return Objects.hash(primary, compositeKey, indications, mechanism, name, manufacturer);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DrugBrands {\n");
    
    sb.append("    primary: ").append(toIndentedString(primary)).append("\n");
    sb.append("    compositeKey: ").append(toIndentedString(compositeKey)).append("\n");
    sb.append("    indications: ").append(toIndentedString(indications)).append("\n");
    sb.append("    mechanism: ").append(toIndentedString(mechanism)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    manufacturer: ").append(toIndentedString(manufacturer)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
