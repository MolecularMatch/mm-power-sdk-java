/*
 * MolecularMatch MMPower
 * MMPower API
 *
 * OpenAPI spec version: 1.0.0
 * Contact: support@molecularmatch.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
/**
 * Describes the use, mechanism of action, pharmacokinetics, pharmacodynamics, and physiological or biochemical effects in the body.
 */
@Schema(description = "Describes the use, mechanism of action, pharmacokinetics, pharmacodynamics, and physiological or biochemical effects in the body.")

public class DrugPharmacology {
  @SerializedName("indication")
  private String indication = null;

  @SerializedName("contraindication")
  private String contraindication = null;

  @SerializedName("pharmacodynamics")
  private String pharmacodynamics = null;

  @SerializedName("mechanism_of_action")
  private String mechanismOfAction = null;

  @SerializedName("absorption")
  private String absorption = null;

  @SerializedName("toxicity")
  private String toxicity = null;

  @SerializedName("protein_binding")
  private String proteinBinding = null;

  @SerializedName("metabolism")
  private String metabolism = null;

  @SerializedName("half_life")
  private String halfLife = null;

  @SerializedName("route_of_elimination")
  private String routeOfElimination = null;

  @SerializedName("volume_of_distribution")
  private String volumeOfDistribution = null;

  @SerializedName("clearance")
  private String clearance = null;

  public DrugPharmacology indication(String indication) {
    this.indication = indication;
    return this;
  }

   /**
   * The approved conditions, diseases, or states for which a drug can safely and effectively be used. An indication is considered to be FDA-approved when it has any of the following designations: NDA, ANDA, BLA, or OTC. May also include indications in other countries, such as Canada (through Health Canada) or in Europe (through the European Medicines Agency).
   * @return indication
  **/
  @Schema(description = "The approved conditions, diseases, or states for which a drug can safely and effectively be used. An indication is considered to be FDA-approved when it has any of the following designations: NDA, ANDA, BLA, or OTC. May also include indications in other countries, such as Canada (through Health Canada) or in Europe (through the European Medicines Agency).")
  public String getIndication() {
    return indication;
  }

  public void setIndication(String indication) {
    this.indication = indication;
  }

  public DrugPharmacology contraindication(String contraindication) {
    this.contraindication = contraindication;
    return this;
  }

   /**
   * The contraindications section from the FDA label.
   * @return contraindication
  **/
  @Schema(description = "The contraindications section from the FDA label.")
  public String getContraindication() {
    return contraindication;
  }

  public void setContraindication(String contraindication) {
    this.contraindication = contraindication;
  }

  public DrugPharmacology pharmacodynamics(String pharmacodynamics) {
    this.pharmacodynamics = pharmacodynamics;
    return this;
  }

   /**
   * A description of how the drug modifies or affects the organism it is being used in. May include effects in the body that are desired (enzyme or protein targets for example) and undesired (also known as “side effects”). This is in contrast to pharmacokinetics, which describes how the body modifies the drug being used.
   * @return pharmacodynamics
  **/
  @Schema(description = "A description of how the drug modifies or affects the organism it is being used in. May include effects in the body that are desired (enzyme or protein targets for example) and undesired (also known as “side effects”). This is in contrast to pharmacokinetics, which describes how the body modifies the drug being used.")
  public String getPharmacodynamics() {
    return pharmacodynamics;
  }

  public void setPharmacodynamics(String pharmacodynamics) {
    this.pharmacodynamics = pharmacodynamics;
  }

  public DrugPharmacology mechanismOfAction(String mechanismOfAction) {
    this.mechanismOfAction = mechanismOfAction;
    return this;
  }

   /**
   * A component of pharmacodynamics that describes the biochemical interaction through which a drug produces its intended effect. May include the exact molecular protein or enzyme targets and/or a description of the physiological effects produced.
   * @return mechanismOfAction
  **/
  @Schema(description = "A component of pharmacodynamics that describes the biochemical interaction through which a drug produces its intended effect. May include the exact molecular protein or enzyme targets and/or a description of the physiological effects produced.")
  public String getMechanismOfAction() {
    return mechanismOfAction;
  }

  public void setMechanismOfAction(String mechanismOfAction) {
    this.mechanismOfAction = mechanismOfAction;
  }

  public DrugPharmacology absorption(String absorption) {
    this.absorption = absorption;
    return this;
  }

   /**
   * A description of the movement of the drug from the site of administration into the bloodstream or target tissue. Common pharmacokinetic metrics used to evaluate absorption include Area Under the Curve (AUC), bioavailability (F), maximum concentration (Cmax), and time to maximum concentration (Tmax).
   * @return absorption
  **/
  @Schema(description = "A description of the movement of the drug from the site of administration into the bloodstream or target tissue. Common pharmacokinetic metrics used to evaluate absorption include Area Under the Curve (AUC), bioavailability (F), maximum concentration (Cmax), and time to maximum concentration (Tmax).")
  public String getAbsorption() {
    return absorption;
  }

  public void setAbsorption(String absorption) {
    this.absorption = absorption;
  }

  public DrugPharmacology toxicity(String toxicity) {
    this.toxicity = toxicity;
    return this;
  }

   /**
   * Any adverse reaction, or side effect, that may or may not occur with use of the drug. May be attributed to a number of effects including: an enhanced therapeutic effect, rare anaphylactic reactions, interactions with other medications, or unanticipated binding of the molecule at different sites within the body.
   * @return toxicity
  **/
  @Schema(description = "Any adverse reaction, or side effect, that may or may not occur with use of the drug. May be attributed to a number of effects including: an enhanced therapeutic effect, rare anaphylactic reactions, interactions with other medications, or unanticipated binding of the molecule at different sites within the body.")
  public String getToxicity() {
    return toxicity;
  }

  public void setToxicity(String toxicity) {
    this.toxicity = toxicity;
  }

  public DrugPharmacology proteinBinding(String proteinBinding) {
    this.proteinBinding = proteinBinding;
    return this;
  }

   /**
   * A description of the drug’s affinity for plama proteins and the proportion of the drug that is bound to them when in circulation within the body.
   * @return proteinBinding
  **/
  @Schema(description = "A description of the drug’s affinity for plama proteins and the proportion of the drug that is bound to them when in circulation within the body.")
  public String getProteinBinding() {
    return proteinBinding;
  }

  public void setProteinBinding(String proteinBinding) {
    this.proteinBinding = proteinBinding;
  }

  public DrugPharmacology metabolism(String metabolism) {
    this.metabolism = metabolism;
    return this;
  }

   /**
   * A description of the chemical degradation of the drug molecule within the body; most commonly by enzymes from the Cytochrome P450 (CYP) system in the liver.
   * @return metabolism
  **/
  @Schema(description = "A description of the chemical degradation of the drug molecule within the body; most commonly by enzymes from the Cytochrome P450 (CYP) system in the liver.")
  public String getMetabolism() {
    return metabolism;
  }

  public void setMetabolism(String metabolism) {
    this.metabolism = metabolism;
  }

  public DrugPharmacology halfLife(String halfLife) {
    this.halfLife = halfLife;
    return this;
  }

   /**
   * The period of time it takes for the amount of drug in the body to be reduced by one half. Provides a description of how quickly the drug is being eliminated and how much is available in the bloodstream.
   * @return halfLife
  **/
  @Schema(description = "The period of time it takes for the amount of drug in the body to be reduced by one half. Provides a description of how quickly the drug is being eliminated and how much is available in the bloodstream.")
  public String getHalfLife() {
    return halfLife;
  }

  public void setHalfLife(String halfLife) {
    this.halfLife = halfLife;
  }

  public DrugPharmacology routeOfElimination(String routeOfElimination) {
    this.routeOfElimination = routeOfElimination;
    return this;
  }

   /**
   * A description of the pathway that is used to excrete the drug from the body. Common pharmacokinetic parameters used to evaluate excretion include elemination half life, renal clearance, and tracking of radiolabelled compounds through the renal and GI system.
   * @return routeOfElimination
  **/
  @Schema(description = "A description of the pathway that is used to excrete the drug from the body. Common pharmacokinetic parameters used to evaluate excretion include elemination half life, renal clearance, and tracking of radiolabelled compounds through the renal and GI system.")
  public String getRouteOfElimination() {
    return routeOfElimination;
  }

  public void setRouteOfElimination(String routeOfElimination) {
    this.routeOfElimination = routeOfElimination;
  }

  public DrugPharmacology volumeOfDistribution(String volumeOfDistribution) {
    this.volumeOfDistribution = volumeOfDistribution;
    return this;
  }

   /**
   * The Vd of a drug represents the degree to which it is distributed into body tissue compared to the plasma.
   * @return volumeOfDistribution
  **/
  @Schema(description = "The Vd of a drug represents the degree to which it is distributed into body tissue compared to the plasma.")
  public String getVolumeOfDistribution() {
    return volumeOfDistribution;
  }

  public void setVolumeOfDistribution(String volumeOfDistribution) {
    this.volumeOfDistribution = volumeOfDistribution;
  }

  public DrugPharmacology clearance(String clearance) {
    this.clearance = clearance;
    return this;
  }

   /**
   * A pharmacokinetic measurement of the rate of removal of the drug from plasma, expressed as mL/min; reflects the rate of elimination of the drug.
   * @return clearance
  **/
  @Schema(description = "A pharmacokinetic measurement of the rate of removal of the drug from plasma, expressed as mL/min; reflects the rate of elimination of the drug.")
  public String getClearance() {
    return clearance;
  }

  public void setClearance(String clearance) {
    this.clearance = clearance;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DrugPharmacology drugPharmacology = (DrugPharmacology) o;
    return Objects.equals(this.indication, drugPharmacology.indication) &&
        Objects.equals(this.contraindication, drugPharmacology.contraindication) &&
        Objects.equals(this.pharmacodynamics, drugPharmacology.pharmacodynamics) &&
        Objects.equals(this.mechanismOfAction, drugPharmacology.mechanismOfAction) &&
        Objects.equals(this.absorption, drugPharmacology.absorption) &&
        Objects.equals(this.toxicity, drugPharmacology.toxicity) &&
        Objects.equals(this.proteinBinding, drugPharmacology.proteinBinding) &&
        Objects.equals(this.metabolism, drugPharmacology.metabolism) &&
        Objects.equals(this.halfLife, drugPharmacology.halfLife) &&
        Objects.equals(this.routeOfElimination, drugPharmacology.routeOfElimination) &&
        Objects.equals(this.volumeOfDistribution, drugPharmacology.volumeOfDistribution) &&
        Objects.equals(this.clearance, drugPharmacology.clearance);
  }

  @Override
  public int hashCode() {
    return Objects.hash(indication, contraindication, pharmacodynamics, mechanismOfAction, absorption, toxicity, proteinBinding, metabolism, halfLife, routeOfElimination, volumeOfDistribution, clearance);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DrugPharmacology {\n");
    
    sb.append("    indication: ").append(toIndentedString(indication)).append("\n");
    sb.append("    contraindication: ").append(toIndentedString(contraindication)).append("\n");
    sb.append("    pharmacodynamics: ").append(toIndentedString(pharmacodynamics)).append("\n");
    sb.append("    mechanismOfAction: ").append(toIndentedString(mechanismOfAction)).append("\n");
    sb.append("    absorption: ").append(toIndentedString(absorption)).append("\n");
    sb.append("    toxicity: ").append(toIndentedString(toxicity)).append("\n");
    sb.append("    proteinBinding: ").append(toIndentedString(proteinBinding)).append("\n");
    sb.append("    metabolism: ").append(toIndentedString(metabolism)).append("\n");
    sb.append("    halfLife: ").append(toIndentedString(halfLife)).append("\n");
    sb.append("    routeOfElimination: ").append(toIndentedString(routeOfElimination)).append("\n");
    sb.append("    volumeOfDistribution: ").append(toIndentedString(volumeOfDistribution)).append("\n");
    sb.append("    clearance: ").append(toIndentedString(clearance)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
