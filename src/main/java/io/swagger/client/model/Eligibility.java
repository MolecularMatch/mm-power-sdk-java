/*
 * MolecularMatch MMPower
 * MMPower API
 *
 * OpenAPI spec version: 1.0.0
 * Contact: support@molecularmatch.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
/**
 * Eligibility
 */


public class Eligibility {
  @SerializedName("gender")
  private String gender = null;

  @SerializedName("gender_based")
  private String genderBased = null;

  @SerializedName("gender_description")
  private String genderDescription = null;

  @SerializedName("minimum_age")
  private String minimumAge = null;

  @SerializedName("maximum_age")
  private String maximumAge = null;

  @SerializedName("healthy_volunteers")
  private String healthyVolunteers = null;

  @SerializedName("criteria")
  private String criteria = null;

  @SerializedName("study_pop")
  private String studyPop = null;

  public Eligibility gender(String gender) {
    this.gender = gender;
    return this;
  }

   /**
   * Get gender
   * @return gender
  **/
  @Schema(description = "")
  public String getGender() {
    return gender;
  }

  public void setGender(String gender) {
    this.gender = gender;
  }

  public Eligibility genderBased(String genderBased) {
    this.genderBased = genderBased;
    return this;
  }

   /**
   * Get genderBased
   * @return genderBased
  **/
  @Schema(description = "")
  public String getGenderBased() {
    return genderBased;
  }

  public void setGenderBased(String genderBased) {
    this.genderBased = genderBased;
  }

  public Eligibility genderDescription(String genderDescription) {
    this.genderDescription = genderDescription;
    return this;
  }

   /**
   * Get genderDescription
   * @return genderDescription
  **/
  @Schema(description = "")
  public String getGenderDescription() {
    return genderDescription;
  }

  public void setGenderDescription(String genderDescription) {
    this.genderDescription = genderDescription;
  }

  public Eligibility minimumAge(String minimumAge) {
    this.minimumAge = minimumAge;
    return this;
  }

   /**
   * Get minimumAge
   * @return minimumAge
  **/
  @Schema(description = "")
  public String getMinimumAge() {
    return minimumAge;
  }

  public void setMinimumAge(String minimumAge) {
    this.minimumAge = minimumAge;
  }

  public Eligibility maximumAge(String maximumAge) {
    this.maximumAge = maximumAge;
    return this;
  }

   /**
   * Get maximumAge
   * @return maximumAge
  **/
  @Schema(description = "")
  public String getMaximumAge() {
    return maximumAge;
  }

  public void setMaximumAge(String maximumAge) {
    this.maximumAge = maximumAge;
  }

  public Eligibility healthyVolunteers(String healthyVolunteers) {
    this.healthyVolunteers = healthyVolunteers;
    return this;
  }

   /**
   * Get healthyVolunteers
   * @return healthyVolunteers
  **/
  @Schema(description = "")
  public String getHealthyVolunteers() {
    return healthyVolunteers;
  }

  public void setHealthyVolunteers(String healthyVolunteers) {
    this.healthyVolunteers = healthyVolunteers;
  }

  public Eligibility criteria(String criteria) {
    this.criteria = criteria;
    return this;
  }

   /**
   * Get criteria
   * @return criteria
  **/
  @Schema(description = "")
  public String getCriteria() {
    return criteria;
  }

  public void setCriteria(String criteria) {
    this.criteria = criteria;
  }

  public Eligibility studyPop(String studyPop) {
    this.studyPop = studyPop;
    return this;
  }

   /**
   * Get studyPop
   * @return studyPop
  **/
  @Schema(description = "")
  public String getStudyPop() {
    return studyPop;
  }

  public void setStudyPop(String studyPop) {
    this.studyPop = studyPop;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Eligibility eligibility = (Eligibility) o;
    return Objects.equals(this.gender, eligibility.gender) &&
        Objects.equals(this.genderBased, eligibility.genderBased) &&
        Objects.equals(this.genderDescription, eligibility.genderDescription) &&
        Objects.equals(this.minimumAge, eligibility.minimumAge) &&
        Objects.equals(this.maximumAge, eligibility.maximumAge) &&
        Objects.equals(this.healthyVolunteers, eligibility.healthyVolunteers) &&
        Objects.equals(this.criteria, eligibility.criteria) &&
        Objects.equals(this.studyPop, eligibility.studyPop);
  }

  @Override
  public int hashCode() {
    return Objects.hash(gender, genderBased, genderDescription, minimumAge, maximumAge, healthyVolunteers, criteria, studyPop);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Eligibility {\n");
    
    sb.append("    gender: ").append(toIndentedString(gender)).append("\n");
    sb.append("    genderBased: ").append(toIndentedString(genderBased)).append("\n");
    sb.append("    genderDescription: ").append(toIndentedString(genderDescription)).append("\n");
    sb.append("    minimumAge: ").append(toIndentedString(minimumAge)).append("\n");
    sb.append("    maximumAge: ").append(toIndentedString(maximumAge)).append("\n");
    sb.append("    healthyVolunteers: ").append(toIndentedString(healthyVolunteers)).append("\n");
    sb.append("    criteria: ").append(toIndentedString(criteria)).append("\n");
    sb.append("    studyPop: ").append(toIndentedString(studyPop)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
