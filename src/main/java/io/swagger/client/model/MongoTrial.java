/*
 * MolecularMatch MMPower
 * MMPower API
 *
 * OpenAPI spec version: 1.0.0
 * Contact: support@molecularmatch.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.client.model.ClinicalTrialArmGroups;
import io.swagger.client.model.ClinicalTrialCountries;
import io.swagger.client.model.ClinicalTrialEligibility;
import io.swagger.client.model.ClinicalTrialInterventions;
import io.swagger.client.model.ClinicalTrialOverallOfficial;
import io.swagger.client.model.ClinicalTrialPrimaryOutcomes;
import io.swagger.client.model.ClinicalTrialSponsors;
import io.swagger.client.model.MongoTrialLocations;
import io.swagger.client.model.MongoTrialStudyDesign;
import io.swagger.client.model.MongoTrialSynonyms;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import org.threeten.bp.OffsetDateTime;
/**
 * MongoTrial
 */


public class MongoTrial {
  @SerializedName("mboost")
  private Float mboost = null;

  @SerializedName("importDate")
  private OffsetDateTime importDate = null;

  @SerializedName("id")
  private String id = null;

  @SerializedName("source")
  private String source = null;

  @SerializedName("exclude")
  private Boolean exclude = null;

  @SerializedName("custom")
  private Boolean custom = null;

  @SerializedName("briefTitle")
  private String briefTitle = null;

  @SerializedName("patientTitle")
  private String patientTitle = null;

  @SerializedName("title")
  private String title = null;

  @SerializedName("briefSummary")
  private String briefSummary = null;

  @SerializedName("summary")
  private String summary = null;

  @SerializedName("status")
  private String status = null;

  @SerializedName("phase")
  private String phase = null;

  @SerializedName("studyType")
  private String studyType = null;

  @SerializedName("studyDesign")
  private MongoTrialStudyDesign studyDesign = null;

  @SerializedName("startDate")
  private OffsetDateTime startDate = null;

  @SerializedName("completionDate")
  private OffsetDateTime completionDate = null;

  @SerializedName("firstReceivedDate")
  private OffsetDateTime firstReceivedDate = null;

  @SerializedName("lastChangedDate")
  private OffsetDateTime lastChangedDate = null;

  @SerializedName("verificationDate")
  private OffsetDateTime verificationDate = null;

  @SerializedName("sponsors")
  private List<ClinicalTrialSponsors> sponsors = null;

  @SerializedName("conditions")
  private List<String> conditions = null;

  @SerializedName("interventions")
  private List<ClinicalTrialInterventions> interventions = null;

  @SerializedName("keywords")
  private List<String> keywords = null;

  @SerializedName("armGroups")
  private List<ClinicalTrialArmGroups> armGroups = null;

  @SerializedName("primaryOutcomes")
  private List<ClinicalTrialPrimaryOutcomes> primaryOutcomes = null;

  @SerializedName("secondaryOutcomes")
  private List<ClinicalTrialPrimaryOutcomes> secondaryOutcomes = null;

  @SerializedName("otherOutcomes")
  private List<ClinicalTrialPrimaryOutcomes> otherOutcomes = null;

  @SerializedName("eligibility")
  private ClinicalTrialEligibility eligibility = null;

  @SerializedName("enrollment")
  private Integer enrollment = null;

  @SerializedName("minAge")
  private Float minAge = null;

  @SerializedName("maxAge")
  private Float maxAge = null;

  @SerializedName("gender")
  private List<String> gender = null;

  @SerializedName("overallOfficial")
  private List<ClinicalTrialOverallOfficial> overallOfficial = null;

  @SerializedName("overallContact")
  private ClinicalTrialOverallOfficial overallContact = null;

  @SerializedName("overallContactBackup")
  private ClinicalTrialOverallOfficial overallContactBackup = null;

  @SerializedName("mmEmail")
  private String mmEmail = null;

  @SerializedName("wrongEmail")
  private Boolean wrongEmail = null;

  @SerializedName("locations")
  private List<MongoTrialLocations> locations = null;

  @SerializedName("countries")
  private List<ClinicalTrialCountries> countries = null;

  @SerializedName("inclusionCriteria")
  private String inclusionCriteria = null;

  @SerializedName("exclusionCriteria")
  private String exclusionCriteria = null;

  @SerializedName("synonyms")
  private List<MongoTrialSynonyms> synonyms = null;

  @SerializedName("acronym")
  private String acronym = null;

  @SerializedName("link")
  private String link = null;

  @SerializedName("whoLink")
  private String whoLink = null;

  @SerializedName("_valid")
  private Object _valid = null;

  @SerializedName("_validMessage")
  private String _validMessage = null;

  public MongoTrial mboost(Float mboost) {
    this.mboost = mboost;
    return this;
  }

   /**
   * intrinsic boost to the record.
   * @return mboost
  **/
  @Schema(description = "intrinsic boost to the record.")
  public Float getMboost() {
    return mboost;
  }

  public void setMboost(Float mboost) {
    this.mboost = mboost;
  }

  public MongoTrial importDate(OffsetDateTime importDate) {
    this.importDate = importDate;
    return this;
  }

   /**
   * date this record was imported into the MolecularMatch database.
   * @return importDate
  **/
  @Schema(description = "date this record was imported into the MolecularMatch database.")
  public OffsetDateTime getImportDate() {
    return importDate;
  }

  public void setImportDate(OffsetDateTime importDate) {
    this.importDate = importDate;
  }

  public MongoTrial id(String id) {
    this.id = id;
    return this;
  }

   /**
   * unique identifier.
   * @return id
  **/
  @Schema(required = true, description = "unique identifier.")
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }

  public MongoTrial source(String source) {
    this.source = source;
    return this;
  }

   /**
   * native data source of this record
   * @return source
  **/
  @Schema(required = true, description = "native data source of this record")
  public String getSource() {
    return source;
  }

  public void setSource(String source) {
    this.source = source;
  }

  public MongoTrial exclude(Boolean exclude) {
    this.exclude = exclude;
    return this;
  }

   /**
   * soft exclude from the MolecularMatch dataset.
   * @return exclude
  **/
  @Schema(description = "soft exclude from the MolecularMatch dataset.")
  public Boolean isExclude() {
    return exclude;
  }

  public void setExclude(Boolean exclude) {
    this.exclude = exclude;
  }

  public MongoTrial custom(Boolean custom) {
    this.custom = custom;
    return this;
  }

   /**
   * custom record in the MolecularMatch dataset
   * @return custom
  **/
  @Schema(description = "custom record in the MolecularMatch dataset")
  public Boolean isCustom() {
    return custom;
  }

  public void setCustom(Boolean custom) {
    this.custom = custom;
  }

  public MongoTrial briefTitle(String briefTitle) {
    this.briefTitle = briefTitle;
    return this;
  }

   /**
   * Abbreviated title for the clinical trial.
   * @return briefTitle
  **/
  @Schema(description = "Abbreviated title for the clinical trial.")
  public String getBriefTitle() {
    return briefTitle;
  }

  public void setBriefTitle(String briefTitle) {
    this.briefTitle = briefTitle;
  }

  public MongoTrial patientTitle(String patientTitle) {
    this.patientTitle = patientTitle;
    return this;
  }

   /**
   * Patient friendly title for the clinical trial.
   * @return patientTitle
  **/
  @Schema(description = "Patient friendly title for the clinical trial.")
  public String getPatientTitle() {
    return patientTitle;
  }

  public void setPatientTitle(String patientTitle) {
    this.patientTitle = patientTitle;
  }

  public MongoTrial title(String title) {
    this.title = title;
    return this;
  }

   /**
   * Official title for the clinical trial.
   * @return title
  **/
  @Schema(description = "Official title for the clinical trial.")
  public String getTitle() {
    return title;
  }

  public void setTitle(String title) {
    this.title = title;
  }

  public MongoTrial briefSummary(String briefSummary) {
    this.briefSummary = briefSummary;
    return this;
  }

   /**
   * Abbreviated summary for the clinical trial.
   * @return briefSummary
  **/
  @Schema(description = "Abbreviated summary for the clinical trial.")
  public String getBriefSummary() {
    return briefSummary;
  }

  public void setBriefSummary(String briefSummary) {
    this.briefSummary = briefSummary;
  }

  public MongoTrial summary(String summary) {
    this.summary = summary;
    return this;
  }

   /**
   * Official title for the clinical trial.
   * @return summary
  **/
  @Schema(description = "Official title for the clinical trial.")
  public String getSummary() {
    return summary;
  }

  public void setSummary(String summary) {
    this.summary = summary;
  }

  public MongoTrial status(String status) {
    this.status = status;
    return this;
  }

   /**
   * Get status
   * @return status
  **/
  @Schema(description = "")
  public String getStatus() {
    return status;
  }

  public void setStatus(String status) {
    this.status = status;
  }

  public MongoTrial phase(String phase) {
    this.phase = phase;
    return this;
  }

   /**
   * Recruitment status for the clinical trial.
   * @return phase
  **/
  @Schema(description = "Recruitment status for the clinical trial.")
  public String getPhase() {
    return phase;
  }

  public void setPhase(String phase) {
    this.phase = phase;
  }

  public MongoTrial studyType(String studyType) {
    this.studyType = studyType;
    return this;
  }

   /**
   * Get studyType
   * @return studyType
  **/
  @Schema(description = "")
  public String getStudyType() {
    return studyType;
  }

  public void setStudyType(String studyType) {
    this.studyType = studyType;
  }

  public MongoTrial studyDesign(MongoTrialStudyDesign studyDesign) {
    this.studyDesign = studyDesign;
    return this;
  }

   /**
   * Get studyDesign
   * @return studyDesign
  **/
  @Schema(description = "")
  public MongoTrialStudyDesign getStudyDesign() {
    return studyDesign;
  }

  public void setStudyDesign(MongoTrialStudyDesign studyDesign) {
    this.studyDesign = studyDesign;
  }

  public MongoTrial startDate(OffsetDateTime startDate) {
    this.startDate = startDate;
    return this;
  }

   /**
   * Get startDate
   * @return startDate
  **/
  @Schema(description = "")
  public OffsetDateTime getStartDate() {
    return startDate;
  }

  public void setStartDate(OffsetDateTime startDate) {
    this.startDate = startDate;
  }

  public MongoTrial completionDate(OffsetDateTime completionDate) {
    this.completionDate = completionDate;
    return this;
  }

   /**
   * Get completionDate
   * @return completionDate
  **/
  @Schema(description = "")
  public OffsetDateTime getCompletionDate() {
    return completionDate;
  }

  public void setCompletionDate(OffsetDateTime completionDate) {
    this.completionDate = completionDate;
  }

  public MongoTrial firstReceivedDate(OffsetDateTime firstReceivedDate) {
    this.firstReceivedDate = firstReceivedDate;
    return this;
  }

   /**
   * Get firstReceivedDate
   * @return firstReceivedDate
  **/
  @Schema(description = "")
  public OffsetDateTime getFirstReceivedDate() {
    return firstReceivedDate;
  }

  public void setFirstReceivedDate(OffsetDateTime firstReceivedDate) {
    this.firstReceivedDate = firstReceivedDate;
  }

  public MongoTrial lastChangedDate(OffsetDateTime lastChangedDate) {
    this.lastChangedDate = lastChangedDate;
    return this;
  }

   /**
   * Get lastChangedDate
   * @return lastChangedDate
  **/
  @Schema(description = "")
  public OffsetDateTime getLastChangedDate() {
    return lastChangedDate;
  }

  public void setLastChangedDate(OffsetDateTime lastChangedDate) {
    this.lastChangedDate = lastChangedDate;
  }

  public MongoTrial verificationDate(OffsetDateTime verificationDate) {
    this.verificationDate = verificationDate;
    return this;
  }

   /**
   * Get verificationDate
   * @return verificationDate
  **/
  @Schema(description = "")
  public OffsetDateTime getVerificationDate() {
    return verificationDate;
  }

  public void setVerificationDate(OffsetDateTime verificationDate) {
    this.verificationDate = verificationDate;
  }

  public MongoTrial sponsors(List<ClinicalTrialSponsors> sponsors) {
    this.sponsors = sponsors;
    return this;
  }

  public MongoTrial addSponsorsItem(ClinicalTrialSponsors sponsorsItem) {
    if (this.sponsors == null) {
      this.sponsors = new ArrayList<ClinicalTrialSponsors>();
    }
    this.sponsors.add(sponsorsItem);
    return this;
  }

   /**
   * Get sponsors
   * @return sponsors
  **/
  @Schema(description = "")
  public List<ClinicalTrialSponsors> getSponsors() {
    return sponsors;
  }

  public void setSponsors(List<ClinicalTrialSponsors> sponsors) {
    this.sponsors = sponsors;
  }

  public MongoTrial conditions(List<String> conditions) {
    this.conditions = conditions;
    return this;
  }

  public MongoTrial addConditionsItem(String conditionsItem) {
    if (this.conditions == null) {
      this.conditions = new ArrayList<String>();
    }
    this.conditions.add(conditionsItem);
    return this;
  }

   /**
   * Get conditions
   * @return conditions
  **/
  @Schema(description = "")
  public List<String> getConditions() {
    return conditions;
  }

  public void setConditions(List<String> conditions) {
    this.conditions = conditions;
  }

  public MongoTrial interventions(List<ClinicalTrialInterventions> interventions) {
    this.interventions = interventions;
    return this;
  }

  public MongoTrial addInterventionsItem(ClinicalTrialInterventions interventionsItem) {
    if (this.interventions == null) {
      this.interventions = new ArrayList<ClinicalTrialInterventions>();
    }
    this.interventions.add(interventionsItem);
    return this;
  }

   /**
   * Get interventions
   * @return interventions
  **/
  @Schema(description = "")
  public List<ClinicalTrialInterventions> getInterventions() {
    return interventions;
  }

  public void setInterventions(List<ClinicalTrialInterventions> interventions) {
    this.interventions = interventions;
  }

  public MongoTrial keywords(List<String> keywords) {
    this.keywords = keywords;
    return this;
  }

  public MongoTrial addKeywordsItem(String keywordsItem) {
    if (this.keywords == null) {
      this.keywords = new ArrayList<String>();
    }
    this.keywords.add(keywordsItem);
    return this;
  }

   /**
   * Get keywords
   * @return keywords
  **/
  @Schema(description = "")
  public List<String> getKeywords() {
    return keywords;
  }

  public void setKeywords(List<String> keywords) {
    this.keywords = keywords;
  }

  public MongoTrial armGroups(List<ClinicalTrialArmGroups> armGroups) {
    this.armGroups = armGroups;
    return this;
  }

  public MongoTrial addArmGroupsItem(ClinicalTrialArmGroups armGroupsItem) {
    if (this.armGroups == null) {
      this.armGroups = new ArrayList<ClinicalTrialArmGroups>();
    }
    this.armGroups.add(armGroupsItem);
    return this;
  }

   /**
   * Get armGroups
   * @return armGroups
  **/
  @Schema(description = "")
  public List<ClinicalTrialArmGroups> getArmGroups() {
    return armGroups;
  }

  public void setArmGroups(List<ClinicalTrialArmGroups> armGroups) {
    this.armGroups = armGroups;
  }

  public MongoTrial primaryOutcomes(List<ClinicalTrialPrimaryOutcomes> primaryOutcomes) {
    this.primaryOutcomes = primaryOutcomes;
    return this;
  }

  public MongoTrial addPrimaryOutcomesItem(ClinicalTrialPrimaryOutcomes primaryOutcomesItem) {
    if (this.primaryOutcomes == null) {
      this.primaryOutcomes = new ArrayList<ClinicalTrialPrimaryOutcomes>();
    }
    this.primaryOutcomes.add(primaryOutcomesItem);
    return this;
  }

   /**
   * Get primaryOutcomes
   * @return primaryOutcomes
  **/
  @Schema(description = "")
  public List<ClinicalTrialPrimaryOutcomes> getPrimaryOutcomes() {
    return primaryOutcomes;
  }

  public void setPrimaryOutcomes(List<ClinicalTrialPrimaryOutcomes> primaryOutcomes) {
    this.primaryOutcomes = primaryOutcomes;
  }

  public MongoTrial secondaryOutcomes(List<ClinicalTrialPrimaryOutcomes> secondaryOutcomes) {
    this.secondaryOutcomes = secondaryOutcomes;
    return this;
  }

  public MongoTrial addSecondaryOutcomesItem(ClinicalTrialPrimaryOutcomes secondaryOutcomesItem) {
    if (this.secondaryOutcomes == null) {
      this.secondaryOutcomes = new ArrayList<ClinicalTrialPrimaryOutcomes>();
    }
    this.secondaryOutcomes.add(secondaryOutcomesItem);
    return this;
  }

   /**
   * Get secondaryOutcomes
   * @return secondaryOutcomes
  **/
  @Schema(description = "")
  public List<ClinicalTrialPrimaryOutcomes> getSecondaryOutcomes() {
    return secondaryOutcomes;
  }

  public void setSecondaryOutcomes(List<ClinicalTrialPrimaryOutcomes> secondaryOutcomes) {
    this.secondaryOutcomes = secondaryOutcomes;
  }

  public MongoTrial otherOutcomes(List<ClinicalTrialPrimaryOutcomes> otherOutcomes) {
    this.otherOutcomes = otherOutcomes;
    return this;
  }

  public MongoTrial addOtherOutcomesItem(ClinicalTrialPrimaryOutcomes otherOutcomesItem) {
    if (this.otherOutcomes == null) {
      this.otherOutcomes = new ArrayList<ClinicalTrialPrimaryOutcomes>();
    }
    this.otherOutcomes.add(otherOutcomesItem);
    return this;
  }

   /**
   * Get otherOutcomes
   * @return otherOutcomes
  **/
  @Schema(description = "")
  public List<ClinicalTrialPrimaryOutcomes> getOtherOutcomes() {
    return otherOutcomes;
  }

  public void setOtherOutcomes(List<ClinicalTrialPrimaryOutcomes> otherOutcomes) {
    this.otherOutcomes = otherOutcomes;
  }

  public MongoTrial eligibility(ClinicalTrialEligibility eligibility) {
    this.eligibility = eligibility;
    return this;
  }

   /**
   * Get eligibility
   * @return eligibility
  **/
  @Schema(description = "")
  public ClinicalTrialEligibility getEligibility() {
    return eligibility;
  }

  public void setEligibility(ClinicalTrialEligibility eligibility) {
    this.eligibility = eligibility;
  }

  public MongoTrial enrollment(Integer enrollment) {
    this.enrollment = enrollment;
    return this;
  }

   /**
   * Get enrollment
   * @return enrollment
  **/
  @Schema(description = "")
  public Integer getEnrollment() {
    return enrollment;
  }

  public void setEnrollment(Integer enrollment) {
    this.enrollment = enrollment;
  }

  public MongoTrial minAge(Float minAge) {
    this.minAge = minAge;
    return this;
  }

   /**
   * Get minAge
   * @return minAge
  **/
  @Schema(required = true, description = "")
  public Float getMinAge() {
    return minAge;
  }

  public void setMinAge(Float minAge) {
    this.minAge = minAge;
  }

  public MongoTrial maxAge(Float maxAge) {
    this.maxAge = maxAge;
    return this;
  }

   /**
   * Get maxAge
   * @return maxAge
  **/
  @Schema(required = true, description = "")
  public Float getMaxAge() {
    return maxAge;
  }

  public void setMaxAge(Float maxAge) {
    this.maxAge = maxAge;
  }

  public MongoTrial gender(List<String> gender) {
    this.gender = gender;
    return this;
  }

  public MongoTrial addGenderItem(String genderItem) {
    if (this.gender == null) {
      this.gender = new ArrayList<String>();
    }
    this.gender.add(genderItem);
    return this;
  }

   /**
   * Get gender
   * @return gender
  **/
  @Schema(description = "")
  public List<String> getGender() {
    return gender;
  }

  public void setGender(List<String> gender) {
    this.gender = gender;
  }

  public MongoTrial overallOfficial(List<ClinicalTrialOverallOfficial> overallOfficial) {
    this.overallOfficial = overallOfficial;
    return this;
  }

  public MongoTrial addOverallOfficialItem(ClinicalTrialOverallOfficial overallOfficialItem) {
    if (this.overallOfficial == null) {
      this.overallOfficial = new ArrayList<ClinicalTrialOverallOfficial>();
    }
    this.overallOfficial.add(overallOfficialItem);
    return this;
  }

   /**
   * Get overallOfficial
   * @return overallOfficial
  **/
  @Schema(description = "")
  public List<ClinicalTrialOverallOfficial> getOverallOfficial() {
    return overallOfficial;
  }

  public void setOverallOfficial(List<ClinicalTrialOverallOfficial> overallOfficial) {
    this.overallOfficial = overallOfficial;
  }

  public MongoTrial overallContact(ClinicalTrialOverallOfficial overallContact) {
    this.overallContact = overallContact;
    return this;
  }

   /**
   * Get overallContact
   * @return overallContact
  **/
  @Schema(description = "")
  public ClinicalTrialOverallOfficial getOverallContact() {
    return overallContact;
  }

  public void setOverallContact(ClinicalTrialOverallOfficial overallContact) {
    this.overallContact = overallContact;
  }

  public MongoTrial overallContactBackup(ClinicalTrialOverallOfficial overallContactBackup) {
    this.overallContactBackup = overallContactBackup;
    return this;
  }

   /**
   * Get overallContactBackup
   * @return overallContactBackup
  **/
  @Schema(description = "")
  public ClinicalTrialOverallOfficial getOverallContactBackup() {
    return overallContactBackup;
  }

  public void setOverallContactBackup(ClinicalTrialOverallOfficial overallContactBackup) {
    this.overallContactBackup = overallContactBackup;
  }

  public MongoTrial mmEmail(String mmEmail) {
    this.mmEmail = mmEmail;
    return this;
  }

   /**
   * Get mmEmail
   * @return mmEmail
  **/
  @Schema(description = "")
  public String getMmEmail() {
    return mmEmail;
  }

  public void setMmEmail(String mmEmail) {
    this.mmEmail = mmEmail;
  }

  public MongoTrial wrongEmail(Boolean wrongEmail) {
    this.wrongEmail = wrongEmail;
    return this;
  }

   /**
   * Get wrongEmail
   * @return wrongEmail
  **/
  @Schema(description = "")
  public Boolean isWrongEmail() {
    return wrongEmail;
  }

  public void setWrongEmail(Boolean wrongEmail) {
    this.wrongEmail = wrongEmail;
  }

  public MongoTrial locations(List<MongoTrialLocations> locations) {
    this.locations = locations;
    return this;
  }

  public MongoTrial addLocationsItem(MongoTrialLocations locationsItem) {
    if (this.locations == null) {
      this.locations = new ArrayList<MongoTrialLocations>();
    }
    this.locations.add(locationsItem);
    return this;
  }

   /**
   * Get locations
   * @return locations
  **/
  @Schema(description = "")
  public List<MongoTrialLocations> getLocations() {
    return locations;
  }

  public void setLocations(List<MongoTrialLocations> locations) {
    this.locations = locations;
  }

  public MongoTrial countries(List<ClinicalTrialCountries> countries) {
    this.countries = countries;
    return this;
  }

  public MongoTrial addCountriesItem(ClinicalTrialCountries countriesItem) {
    if (this.countries == null) {
      this.countries = new ArrayList<ClinicalTrialCountries>();
    }
    this.countries.add(countriesItem);
    return this;
  }

   /**
   * Get countries
   * @return countries
  **/
  @Schema(description = "")
  public List<ClinicalTrialCountries> getCountries() {
    return countries;
  }

  public void setCountries(List<ClinicalTrialCountries> countries) {
    this.countries = countries;
  }

  public MongoTrial inclusionCriteria(String inclusionCriteria) {
    this.inclusionCriteria = inclusionCriteria;
    return this;
  }

   /**
   * Get inclusionCriteria
   * @return inclusionCriteria
  **/
  @Schema(description = "")
  public String getInclusionCriteria() {
    return inclusionCriteria;
  }

  public void setInclusionCriteria(String inclusionCriteria) {
    this.inclusionCriteria = inclusionCriteria;
  }

  public MongoTrial exclusionCriteria(String exclusionCriteria) {
    this.exclusionCriteria = exclusionCriteria;
    return this;
  }

   /**
   * Get exclusionCriteria
   * @return exclusionCriteria
  **/
  @Schema(description = "")
  public String getExclusionCriteria() {
    return exclusionCriteria;
  }

  public void setExclusionCriteria(String exclusionCriteria) {
    this.exclusionCriteria = exclusionCriteria;
  }

  public MongoTrial synonyms(List<MongoTrialSynonyms> synonyms) {
    this.synonyms = synonyms;
    return this;
  }

  public MongoTrial addSynonymsItem(MongoTrialSynonyms synonymsItem) {
    if (this.synonyms == null) {
      this.synonyms = new ArrayList<MongoTrialSynonyms>();
    }
    this.synonyms.add(synonymsItem);
    return this;
  }

   /**
   * Get synonyms
   * @return synonyms
  **/
  @Schema(description = "")
  public List<MongoTrialSynonyms> getSynonyms() {
    return synonyms;
  }

  public void setSynonyms(List<MongoTrialSynonyms> synonyms) {
    this.synonyms = synonyms;
  }

  public MongoTrial acronym(String acronym) {
    this.acronym = acronym;
    return this;
  }

   /**
   * Get acronym
   * @return acronym
  **/
  @Schema(description = "")
  public String getAcronym() {
    return acronym;
  }

  public void setAcronym(String acronym) {
    this.acronym = acronym;
  }

  public MongoTrial link(String link) {
    this.link = link;
    return this;
  }

   /**
   * Get link
   * @return link
  **/
  @Schema(description = "")
  public String getLink() {
    return link;
  }

  public void setLink(String link) {
    this.link = link;
  }

  public MongoTrial whoLink(String whoLink) {
    this.whoLink = whoLink;
    return this;
  }

   /**
   * Get whoLink
   * @return whoLink
  **/
  @Schema(description = "")
  public String getWhoLink() {
    return whoLink;
  }

  public void setWhoLink(String whoLink) {
    this.whoLink = whoLink;
  }

  public MongoTrial _valid(Object _valid) {
    this._valid = _valid;
    return this;
  }

   /**
   * Get _valid
   * @return _valid
  **/
  @Schema(description = "")
  public Object getValid() {
    return _valid;
  }

  public void setValid(Object _valid) {
    this._valid = _valid;
  }

  public MongoTrial _validMessage(String _validMessage) {
    this._validMessage = _validMessage;
    return this;
  }

   /**
   * Get _validMessage
   * @return _validMessage
  **/
  @Schema(description = "")
  public String getValidMessage() {
    return _validMessage;
  }

  public void setValidMessage(String _validMessage) {
    this._validMessage = _validMessage;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MongoTrial mongoTrial = (MongoTrial) o;
    return Objects.equals(this.mboost, mongoTrial.mboost) &&
        Objects.equals(this.importDate, mongoTrial.importDate) &&
        Objects.equals(this.id, mongoTrial.id) &&
        Objects.equals(this.source, mongoTrial.source) &&
        Objects.equals(this.exclude, mongoTrial.exclude) &&
        Objects.equals(this.custom, mongoTrial.custom) &&
        Objects.equals(this.briefTitle, mongoTrial.briefTitle) &&
        Objects.equals(this.patientTitle, mongoTrial.patientTitle) &&
        Objects.equals(this.title, mongoTrial.title) &&
        Objects.equals(this.briefSummary, mongoTrial.briefSummary) &&
        Objects.equals(this.summary, mongoTrial.summary) &&
        Objects.equals(this.status, mongoTrial.status) &&
        Objects.equals(this.phase, mongoTrial.phase) &&
        Objects.equals(this.studyType, mongoTrial.studyType) &&
        Objects.equals(this.studyDesign, mongoTrial.studyDesign) &&
        Objects.equals(this.startDate, mongoTrial.startDate) &&
        Objects.equals(this.completionDate, mongoTrial.completionDate) &&
        Objects.equals(this.firstReceivedDate, mongoTrial.firstReceivedDate) &&
        Objects.equals(this.lastChangedDate, mongoTrial.lastChangedDate) &&
        Objects.equals(this.verificationDate, mongoTrial.verificationDate) &&
        Objects.equals(this.sponsors, mongoTrial.sponsors) &&
        Objects.equals(this.conditions, mongoTrial.conditions) &&
        Objects.equals(this.interventions, mongoTrial.interventions) &&
        Objects.equals(this.keywords, mongoTrial.keywords) &&
        Objects.equals(this.armGroups, mongoTrial.armGroups) &&
        Objects.equals(this.primaryOutcomes, mongoTrial.primaryOutcomes) &&
        Objects.equals(this.secondaryOutcomes, mongoTrial.secondaryOutcomes) &&
        Objects.equals(this.otherOutcomes, mongoTrial.otherOutcomes) &&
        Objects.equals(this.eligibility, mongoTrial.eligibility) &&
        Objects.equals(this.enrollment, mongoTrial.enrollment) &&
        Objects.equals(this.minAge, mongoTrial.minAge) &&
        Objects.equals(this.maxAge, mongoTrial.maxAge) &&
        Objects.equals(this.gender, mongoTrial.gender) &&
        Objects.equals(this.overallOfficial, mongoTrial.overallOfficial) &&
        Objects.equals(this.overallContact, mongoTrial.overallContact) &&
        Objects.equals(this.overallContactBackup, mongoTrial.overallContactBackup) &&
        Objects.equals(this.mmEmail, mongoTrial.mmEmail) &&
        Objects.equals(this.wrongEmail, mongoTrial.wrongEmail) &&
        Objects.equals(this.locations, mongoTrial.locations) &&
        Objects.equals(this.countries, mongoTrial.countries) &&
        Objects.equals(this.inclusionCriteria, mongoTrial.inclusionCriteria) &&
        Objects.equals(this.exclusionCriteria, mongoTrial.exclusionCriteria) &&
        Objects.equals(this.synonyms, mongoTrial.synonyms) &&
        Objects.equals(this.acronym, mongoTrial.acronym) &&
        Objects.equals(this.link, mongoTrial.link) &&
        Objects.equals(this.whoLink, mongoTrial.whoLink) &&
        Objects.equals(this._valid, mongoTrial._valid) &&
        Objects.equals(this._validMessage, mongoTrial._validMessage);
  }

  @Override
  public int hashCode() {
    return Objects.hash(mboost, importDate, id, source, exclude, custom, briefTitle, patientTitle, title, briefSummary, summary, status, phase, studyType, studyDesign, startDate, completionDate, firstReceivedDate, lastChangedDate, verificationDate, sponsors, conditions, interventions, keywords, armGroups, primaryOutcomes, secondaryOutcomes, otherOutcomes, eligibility, enrollment, minAge, maxAge, gender, overallOfficial, overallContact, overallContactBackup, mmEmail, wrongEmail, locations, countries, inclusionCriteria, exclusionCriteria, synonyms, acronym, link, whoLink, _valid, _validMessage);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MongoTrial {\n");
    
    sb.append("    mboost: ").append(toIndentedString(mboost)).append("\n");
    sb.append("    importDate: ").append(toIndentedString(importDate)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    source: ").append(toIndentedString(source)).append("\n");
    sb.append("    exclude: ").append(toIndentedString(exclude)).append("\n");
    sb.append("    custom: ").append(toIndentedString(custom)).append("\n");
    sb.append("    briefTitle: ").append(toIndentedString(briefTitle)).append("\n");
    sb.append("    patientTitle: ").append(toIndentedString(patientTitle)).append("\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("    briefSummary: ").append(toIndentedString(briefSummary)).append("\n");
    sb.append("    summary: ").append(toIndentedString(summary)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    phase: ").append(toIndentedString(phase)).append("\n");
    sb.append("    studyType: ").append(toIndentedString(studyType)).append("\n");
    sb.append("    studyDesign: ").append(toIndentedString(studyDesign)).append("\n");
    sb.append("    startDate: ").append(toIndentedString(startDate)).append("\n");
    sb.append("    completionDate: ").append(toIndentedString(completionDate)).append("\n");
    sb.append("    firstReceivedDate: ").append(toIndentedString(firstReceivedDate)).append("\n");
    sb.append("    lastChangedDate: ").append(toIndentedString(lastChangedDate)).append("\n");
    sb.append("    verificationDate: ").append(toIndentedString(verificationDate)).append("\n");
    sb.append("    sponsors: ").append(toIndentedString(sponsors)).append("\n");
    sb.append("    conditions: ").append(toIndentedString(conditions)).append("\n");
    sb.append("    interventions: ").append(toIndentedString(interventions)).append("\n");
    sb.append("    keywords: ").append(toIndentedString(keywords)).append("\n");
    sb.append("    armGroups: ").append(toIndentedString(armGroups)).append("\n");
    sb.append("    primaryOutcomes: ").append(toIndentedString(primaryOutcomes)).append("\n");
    sb.append("    secondaryOutcomes: ").append(toIndentedString(secondaryOutcomes)).append("\n");
    sb.append("    otherOutcomes: ").append(toIndentedString(otherOutcomes)).append("\n");
    sb.append("    eligibility: ").append(toIndentedString(eligibility)).append("\n");
    sb.append("    enrollment: ").append(toIndentedString(enrollment)).append("\n");
    sb.append("    minAge: ").append(toIndentedString(minAge)).append("\n");
    sb.append("    maxAge: ").append(toIndentedString(maxAge)).append("\n");
    sb.append("    gender: ").append(toIndentedString(gender)).append("\n");
    sb.append("    overallOfficial: ").append(toIndentedString(overallOfficial)).append("\n");
    sb.append("    overallContact: ").append(toIndentedString(overallContact)).append("\n");
    sb.append("    overallContactBackup: ").append(toIndentedString(overallContactBackup)).append("\n");
    sb.append("    mmEmail: ").append(toIndentedString(mmEmail)).append("\n");
    sb.append("    wrongEmail: ").append(toIndentedString(wrongEmail)).append("\n");
    sb.append("    locations: ").append(toIndentedString(locations)).append("\n");
    sb.append("    countries: ").append(toIndentedString(countries)).append("\n");
    sb.append("    inclusionCriteria: ").append(toIndentedString(inclusionCriteria)).append("\n");
    sb.append("    exclusionCriteria: ").append(toIndentedString(exclusionCriteria)).append("\n");
    sb.append("    synonyms: ").append(toIndentedString(synonyms)).append("\n");
    sb.append("    acronym: ").append(toIndentedString(acronym)).append("\n");
    sb.append("    link: ").append(toIndentedString(link)).append("\n");
    sb.append("    whoLink: ").append(toIndentedString(whoLink)).append("\n");
    sb.append("    _valid: ").append(toIndentedString(_valid)).append("\n");
    sb.append("    _validMessage: ").append(toIndentedString(_validMessage)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
