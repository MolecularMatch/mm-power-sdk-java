/*
 * MolecularMatch MMPower
 * MMPower API
 *
 * OpenAPI spec version: 1.0.0
 * Contact: support@molecularmatch.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.client.model.ArmGroup;
import io.swagger.client.model.ClinicalTrialSponsors;
import io.swagger.client.model.Contact;
import io.swagger.client.model.Eligibility;
import io.swagger.client.model.ExpandedAccess;
import io.swagger.client.model.Facility;
import io.swagger.client.model.Intervention;
import io.swagger.client.model.Outcome;
import io.swagger.client.model.Oversight;
import io.swagger.client.model.Reference;
import io.swagger.client.model.ResponsibleParty;
import io.swagger.client.model.StudyDesign;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.time.OffsetDateTime;
/**
 * PrivateTrial
 */


public class PrivateTrial {
  @SerializedName("institution_id")
  private String institutionId = null;

  @SerializedName("institution_study_id")
  private String institutionStudyId = null;

  @SerializedName("registry_id")
  private String registryId = null;

  @SerializedName("brief_title")
  private String briefTitle = null;

  @SerializedName("acronym")
  private java.util.List<String> acronym = null;

  @SerializedName("official_title")
  private String officialTitle = null;

  @SerializedName("sponsors")
  private java.util.List<ClinicalTrialSponsors> sponsors = null;

  @SerializedName("source")
  private String source = null;

  @SerializedName("oversight")
  private Oversight oversight = null;

  @SerializedName("brief_summary")
  private String briefSummary = null;

  @SerializedName("detailed_description")
  private String detailedDescription = null;

  @SerializedName("status")
  private String status = null;

  @SerializedName("start_date")
  private OffsetDateTime startDate = null;

  @SerializedName("completion_date")
  private OffsetDateTime completionDate = null;

  @SerializedName("phase")
  private String phase = "N/A";

  @SerializedName("study_type")
  private String studyType = null;

  @SerializedName("has_expanded_access")
  private Boolean hasExpandedAccess = null;

  @SerializedName("expanded_access")
  private ExpandedAccess expandedAccess = null;

  @SerializedName("study_design")
  private StudyDesign studyDesign = null;

  @SerializedName("primary_outcome")
  private java.util.List<Outcome> primaryOutcome = null;

  @SerializedName("secondary_outcome")
  private java.util.List<Outcome> secondaryOutcome = null;

  @SerializedName("other_outcome")
  private java.util.List<Outcome> otherOutcome = null;

  @SerializedName("number_of_arms")
  private Integer numberOfArms = 1;

  @SerializedName("number_of_groups")
  private Integer numberOfGroups = 1;

  @SerializedName("enrollment")
  private Integer enrollment = null;

  @SerializedName("condition")
  private java.util.List<String> condition = null;

  @SerializedName("arm_group")
  private java.util.List<ArmGroup> armGroup = null;

  @SerializedName("intervention")
  private java.util.List<Intervention> intervention = null;

  /**
   * Gets or Sets biospecRetention
   */
  @JsonAdapter(BiospecRetentionEnum.Adapter.class)
  public enum BiospecRetentionEnum {
    NONE_RETAINED("None Retained"),
    SAMPLES_WITH_DNA("Samples With DNA"),
    SAMPLES_WITHOUT_DNA("Samples Without DNA");

    private String value;

    BiospecRetentionEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static BiospecRetentionEnum fromValue(String text) {
      for (BiospecRetentionEnum b : BiospecRetentionEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<BiospecRetentionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final BiospecRetentionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public BiospecRetentionEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return BiospecRetentionEnum.fromValue(String.valueOf(value));
      }
    }
  }  @SerializedName("biospec_retention")
  private BiospecRetentionEnum biospecRetention = BiospecRetentionEnum.NONE_RETAINED;

  @SerializedName("biospec_descr")
  private String biospecDescr = null;

  @SerializedName("eligibility")
  private Eligibility eligibility = null;

  @SerializedName("overall_official")
  private java.util.List<Contact> overallOfficial = null;

  @SerializedName("overall_contact")
  private Contact overallContact = null;

  @SerializedName("overall_contact_backup")
  private Contact overallContactBackup = null;

  @SerializedName("location")
  private java.util.List<Facility> location = null;

  @SerializedName("location_countries")
  private java.util.List<String> locationCountries = null;

  @SerializedName("link")
  private String link = null;

  @SerializedName("reference")
  private java.util.List<Reference> reference = null;

  @SerializedName("verification_date")
  private OffsetDateTime verificationDate = null;

  @SerializedName("study_first_submitted")
  private OffsetDateTime studyFirstSubmitted = null;

  @SerializedName("study_first_posted")
  private OffsetDateTime studyFirstPosted = null;

  @SerializedName("last_update_posted")
  private OffsetDateTime lastUpdatePosted = null;

  @SerializedName("keyword")
  private java.util.List<String> keyword = null;

  @SerializedName("responsible_party")
  private java.util.List<ResponsibleParty> responsibleParty = null;

  public PrivateTrial institutionId(String institutionId) {
    this.institutionId = institutionId;
    return this;
  }

   /**
   * Unique institution identifier.
   * @return institutionId
  **/
  @Schema(description = "Unique institution identifier.")
  public String getInstitutionId() {
    return institutionId;
  }

  public void setInstitutionId(String institutionId) {
    this.institutionId = institutionId;
  }

  public PrivateTrial institutionStudyId(String institutionStudyId) {
    this.institutionStudyId = institutionStudyId;
    return this;
  }

   /**
   * Unique study identifier.
   * @return institutionStudyId
  **/
  @Schema(description = "Unique study identifier.")
  public String getInstitutionStudyId() {
    return institutionStudyId;
  }

  public void setInstitutionStudyId(String institutionStudyId) {
    this.institutionStudyId = institutionStudyId;
  }

  public PrivateTrial registryId(String registryId) {
    this.registryId = registryId;
    return this;
  }

   /**
   * The public registry study id.  This is only populated once the trial is no longer a private trial.
   * @return registryId
  **/
  @Schema(description = "The public registry study id.  This is only populated once the trial is no longer a private trial.")
  public String getRegistryId() {
    return registryId;
  }

  public void setRegistryId(String registryId) {
    this.registryId = registryId;
  }

  public PrivateTrial briefTitle(String briefTitle) {
    this.briefTitle = briefTitle;
    return this;
  }

   /**
   * A short title of the clinical study written in language intended for the lay public. The title should include, where possible, information on the participants, condition being evaluated, and intervention(s) studied.
   * @return briefTitle
  **/
  @Schema(description = "A short title of the clinical study written in language intended for the lay public. The title should include, where possible, information on the participants, condition being evaluated, and intervention(s) studied.")
  public String getBriefTitle() {
    return briefTitle;
  }

  public void setBriefTitle(String briefTitle) {
    this.briefTitle = briefTitle;
  }

  public PrivateTrial acronym(java.util.List<String> acronym) {
    this.acronym = acronym;
    return this;
  }

  public PrivateTrial addAcronymItem(String acronymItem) {
    if (this.acronym == null) {
      this.acronym = new java.util.ArrayList<>();
    }
    this.acronym.add(acronymItem);
    return this;
  }

   /**
   * Acronyms or abbreviations used publicly to identify the clinical study.
   * @return acronym
  **/
  @Schema(description = "Acronyms or abbreviations used publicly to identify the clinical study.")
  public java.util.List<String> getAcronym() {
    return acronym;
  }

  public void setAcronym(java.util.List<String> acronym) {
    this.acronym = acronym;
  }

  public PrivateTrial officialTitle(String officialTitle) {
    this.officialTitle = officialTitle;
    return this;
  }

   /**
   * Official title for the clinical trial.
   * @return officialTitle
  **/
  @Schema(description = "Official title for the clinical trial.")
  public String getOfficialTitle() {
    return officialTitle;
  }

  public void setOfficialTitle(String officialTitle) {
    this.officialTitle = officialTitle;
  }

  public PrivateTrial sponsors(java.util.List<ClinicalTrialSponsors> sponsors) {
    this.sponsors = sponsors;
    return this;
  }

  public PrivateTrial addSponsorsItem(ClinicalTrialSponsors sponsorsItem) {
    if (this.sponsors == null) {
      this.sponsors = new java.util.ArrayList<>();
    }
    this.sponsors.add(sponsorsItem);
    return this;
  }

   /**
   * The list of organizations or persons who initiated the study and who have authority and control over the study.
   * @return sponsors
  **/
  @Schema(description = "The list of organizations or persons who initiated the study and who have authority and control over the study.")
  public java.util.List<ClinicalTrialSponsors> getSponsors() {
    return sponsors;
  }

  public void setSponsors(java.util.List<ClinicalTrialSponsors> sponsors) {
    this.sponsors = sponsors;
  }

  public PrivateTrial source(String source) {
    this.source = source;
    return this;
  }

   /**
   * Native data source of this record
   * @return source
  **/
  @Schema(description = "Native data source of this record")
  public String getSource() {
    return source;
  }

  public void setSource(String source) {
    this.source = source;
  }

  public PrivateTrial oversight(Oversight oversight) {
    this.oversight = oversight;
    return this;
  }

   /**
   * Get oversight
   * @return oversight
  **/
  @Schema(description = "")
  public Oversight getOversight() {
    return oversight;
  }

  public void setOversight(Oversight oversight) {
    this.oversight = oversight;
  }

  public PrivateTrial briefSummary(String briefSummary) {
    this.briefSummary = briefSummary;
    return this;
  }

   /**
   * A short description of the clinical study, including a brief statement of the clinical study&#x27;s hypothesis, written in language intended for the lay public.
   * @return briefSummary
  **/
  @Schema(description = "A short description of the clinical study, including a brief statement of the clinical study's hypothesis, written in language intended for the lay public.")
  public String getBriefSummary() {
    return briefSummary;
  }

  public void setBriefSummary(String briefSummary) {
    this.briefSummary = briefSummary;
  }

  public PrivateTrial detailedDescription(String detailedDescription) {
    this.detailedDescription = detailedDescription;
    return this;
  }

   /**
   * Extended description of the protocol, including more technical information (as compared to the Brief Summary), if desired. Do not include the entire protocol; do not duplicate information recorded in other data elements, such as Eligibility Criteria or outcome measures.
   * @return detailedDescription
  **/
  @Schema(description = "Extended description of the protocol, including more technical information (as compared to the Brief Summary), if desired. Do not include the entire protocol; do not duplicate information recorded in other data elements, such as Eligibility Criteria or outcome measures.")
  public String getDetailedDescription() {
    return detailedDescription;
  }

  public void setDetailedDescription(String detailedDescription) {
    this.detailedDescription = detailedDescription;
  }

  public PrivateTrial status(String status) {
    this.status = status;
    return this;
  }

   /**
   * Trial recruiting status.
   * @return status
  **/
  @Schema(description = "Trial recruiting status.")
  public String getStatus() {
    return status;
  }

  public void setStatus(String status) {
    this.status = status;
  }

  public PrivateTrial startDate(OffsetDateTime startDate) {
    this.startDate = startDate;
    return this;
  }

   /**
   * The estimated date on which the clinical study will be open for recruitment of participants, or the actual date on which the first participant was enrolled.
   * @return startDate
  **/
  @Schema(description = "The estimated date on which the clinical study will be open for recruitment of participants, or the actual date on which the first participant was enrolled.")
  public OffsetDateTime getStartDate() {
    return startDate;
  }

  public void setStartDate(OffsetDateTime startDate) {
    this.startDate = startDate;
  }

  public PrivateTrial completionDate(OffsetDateTime completionDate) {
    this.completionDate = completionDate;
    return this;
  }

   /**
   * The date the final participant was examined or received an intervention for purposes of final collection of data for the primary and secondary outcome measures and adverse events (for example, last participant’s last visit), whether the clinical study concluded according to the pre-specified protocol or was terminated
   * @return completionDate
  **/
  @Schema(description = "The date the final participant was examined or received an intervention for purposes of final collection of data for the primary and secondary outcome measures and adverse events (for example, last participant’s last visit), whether the clinical study concluded according to the pre-specified protocol or was terminated")
  public OffsetDateTime getCompletionDate() {
    return completionDate;
  }

  public void setCompletionDate(OffsetDateTime completionDate) {
    this.completionDate = completionDate;
  }

  public PrivateTrial phase(String phase) {
    this.phase = phase;
    return this;
  }

   /**
   * For a clinical trial of a drug product (including a biological product), the numerical phase of such clinical trial, consistent with terminology in 21 CFR 312.21 and in 21 CFR 312.85 for phase 4 studies.
   * @return phase
  **/
  @Schema(description = "For a clinical trial of a drug product (including a biological product), the numerical phase of such clinical trial, consistent with terminology in 21 CFR 312.21 and in 21 CFR 312.85 for phase 4 studies.")
  public String getPhase() {
    return phase;
  }

  public void setPhase(String phase) {
    this.phase = phase;
  }

  public PrivateTrial studyType(String studyType) {
    this.studyType = studyType;
    return this;
  }

   /**
   * The nature of the investigation or investigational use for which clinical study information is being submitted.
   * @return studyType
  **/
  @Schema(description = "The nature of the investigation or investigational use for which clinical study information is being submitted.")
  public String getStudyType() {
    return studyType;
  }

  public void setStudyType(String studyType) {
    this.studyType = studyType;
  }

  public PrivateTrial hasExpandedAccess(Boolean hasExpandedAccess) {
    this.hasExpandedAccess = hasExpandedAccess;
    return this;
  }

   /**
   * Whether there is expanded access to the investigational product for patients who do not qualify for enrollment in a clinical trial. Expanded Access for investigational drug products (including biological products) includes all expanded access types under section 561 of the Federal Food, Drug, and Cosmetic Act: (1) for individual participants, including emergency use; (2) for intermediate-size participant populations; and (3) under a treatment IND or treatment protocol.
   * @return hasExpandedAccess
  **/
  @Schema(description = "Whether there is expanded access to the investigational product for patients who do not qualify for enrollment in a clinical trial. Expanded Access for investigational drug products (including biological products) includes all expanded access types under section 561 of the Federal Food, Drug, and Cosmetic Act: (1) for individual participants, including emergency use; (2) for intermediate-size participant populations; and (3) under a treatment IND or treatment protocol.")
  public Boolean isHasExpandedAccess() {
    return hasExpandedAccess;
  }

  public void setHasExpandedAccess(Boolean hasExpandedAccess) {
    this.hasExpandedAccess = hasExpandedAccess;
  }

  public PrivateTrial expandedAccess(ExpandedAccess expandedAccess) {
    this.expandedAccess = expandedAccess;
    return this;
  }

   /**
   * Get expandedAccess
   * @return expandedAccess
  **/
  @Schema(description = "")
  public ExpandedAccess getExpandedAccess() {
    return expandedAccess;
  }

  public void setExpandedAccess(ExpandedAccess expandedAccess) {
    this.expandedAccess = expandedAccess;
  }

  public PrivateTrial studyDesign(StudyDesign studyDesign) {
    this.studyDesign = studyDesign;
    return this;
  }

   /**
   * Get studyDesign
   * @return studyDesign
  **/
  @Schema(description = "")
  public StudyDesign getStudyDesign() {
    return studyDesign;
  }

  public void setStudyDesign(StudyDesign studyDesign) {
    this.studyDesign = studyDesign;
  }

  public PrivateTrial primaryOutcome(java.util.List<Outcome> primaryOutcome) {
    this.primaryOutcome = primaryOutcome;
    return this;
  }

  public PrivateTrial addPrimaryOutcomeItem(Outcome primaryOutcomeItem) {
    if (this.primaryOutcome == null) {
      this.primaryOutcome = new java.util.ArrayList<>();
    }
    this.primaryOutcome.add(primaryOutcomeItem);
    return this;
  }

   /**
   * The outcome that an investigator considers to be the most important among the many outcomes that are to be examined in the study.
   * @return primaryOutcome
  **/
  @Schema(description = "The outcome that an investigator considers to be the most important among the many outcomes that are to be examined in the study.")
  public java.util.List<Outcome> getPrimaryOutcome() {
    return primaryOutcome;
  }

  public void setPrimaryOutcome(java.util.List<Outcome> primaryOutcome) {
    this.primaryOutcome = primaryOutcome;
  }

  public PrivateTrial secondaryOutcome(java.util.List<Outcome> secondaryOutcome) {
    this.secondaryOutcome = secondaryOutcome;
    return this;
  }

  public PrivateTrial addSecondaryOutcomeItem(Outcome secondaryOutcomeItem) {
    if (this.secondaryOutcome == null) {
      this.secondaryOutcome = new java.util.ArrayList<>();
    }
    this.secondaryOutcome.add(secondaryOutcomeItem);
    return this;
  }

   /**
   * Get secondaryOutcome
   * @return secondaryOutcome
  **/
  @Schema(description = "")
  public java.util.List<Outcome> getSecondaryOutcome() {
    return secondaryOutcome;
  }

  public void setSecondaryOutcome(java.util.List<Outcome> secondaryOutcome) {
    this.secondaryOutcome = secondaryOutcome;
  }

  public PrivateTrial otherOutcome(java.util.List<Outcome> otherOutcome) {
    this.otherOutcome = otherOutcome;
    return this;
  }

  public PrivateTrial addOtherOutcomeItem(Outcome otherOutcomeItem) {
    if (this.otherOutcome == null) {
      this.otherOutcome = new java.util.ArrayList<>();
    }
    this.otherOutcome.add(otherOutcomeItem);
    return this;
  }

   /**
   * Get otherOutcome
   * @return otherOutcome
  **/
  @Schema(description = "")
  public java.util.List<Outcome> getOtherOutcome() {
    return otherOutcome;
  }

  public void setOtherOutcome(java.util.List<Outcome> otherOutcome) {
    this.otherOutcome = otherOutcome;
  }

  public PrivateTrial numberOfArms(Integer numberOfArms) {
    this.numberOfArms = numberOfArms;
    return this;
  }

   /**
   * The number of trial arms.
   * @return numberOfArms
  **/
  @Schema(description = "The number of trial arms.")
  public Integer getNumberOfArms() {
    return numberOfArms;
  }

  public void setNumberOfArms(Integer numberOfArms) {
    this.numberOfArms = numberOfArms;
  }

  public PrivateTrial numberOfGroups(Integer numberOfGroups) {
    this.numberOfGroups = numberOfGroups;
    return this;
  }

   /**
   * The number of trial groups.
   * @return numberOfGroups
  **/
  @Schema(description = "The number of trial groups.")
  public Integer getNumberOfGroups() {
    return numberOfGroups;
  }

  public void setNumberOfGroups(Integer numberOfGroups) {
    this.numberOfGroups = numberOfGroups;
  }

  public PrivateTrial enrollment(Integer enrollment) {
    this.enrollment = enrollment;
    return this;
  }

   /**
   * The estimated total number of participants to be enrolled (target number) or the actual total number of participants that are enrolled in the clinical study.
   * @return enrollment
  **/
  @Schema(description = "The estimated total number of participants to be enrolled (target number) or the actual total number of participants that are enrolled in the clinical study.")
  public Integer getEnrollment() {
    return enrollment;
  }

  public void setEnrollment(Integer enrollment) {
    this.enrollment = enrollment;
  }

  public PrivateTrial condition(java.util.List<String> condition) {
    this.condition = condition;
    return this;
  }

  public PrivateTrial addConditionItem(String conditionItem) {
    if (this.condition == null) {
      this.condition = new java.util.ArrayList<>();
    }
    this.condition.add(conditionItem);
    return this;
  }

   /**
   * Diseases/Conditions related to this trial.
   * @return condition
  **/
  @Schema(description = "Diseases/Conditions related to this trial.")
  public java.util.List<String> getCondition() {
    return condition;
  }

  public void setCondition(java.util.List<String> condition) {
    this.condition = condition;
  }

  public PrivateTrial armGroup(java.util.List<ArmGroup> armGroup) {
    this.armGroup = armGroup;
    return this;
  }

  public PrivateTrial addArmGroupItem(ArmGroup armGroupItem) {
    if (this.armGroup == null) {
      this.armGroup = new java.util.ArrayList<>();
    }
    this.armGroup.add(armGroupItem);
    return this;
  }

   /**
   * Pre-specified groups of participants in a clinical trial assigned to receive specific interventions (or no intervention) according to a protocol.
   * @return armGroup
  **/
  @Schema(description = "Pre-specified groups of participants in a clinical trial assigned to receive specific interventions (or no intervention) according to a protocol.")
  public java.util.List<ArmGroup> getArmGroup() {
    return armGroup;
  }

  public void setArmGroup(java.util.List<ArmGroup> armGroup) {
    this.armGroup = armGroup;
  }

  public PrivateTrial intervention(java.util.List<Intervention> intervention) {
    this.intervention = intervention;
    return this;
  }

  public PrivateTrial addInterventionItem(Intervention interventionItem) {
    if (this.intervention == null) {
      this.intervention = new java.util.ArrayList<>();
    }
    this.intervention.add(interventionItem);
    return this;
  }

   /**
   * Specifies the intervention(s) associated with each arm or group.
   * @return intervention
  **/
  @Schema(description = "Specifies the intervention(s) associated with each arm or group.")
  public java.util.List<Intervention> getIntervention() {
    return intervention;
  }

  public void setIntervention(java.util.List<Intervention> intervention) {
    this.intervention = intervention;
  }

  public PrivateTrial biospecRetention(BiospecRetentionEnum biospecRetention) {
    this.biospecRetention = biospecRetention;
    return this;
  }

   /**
   * Get biospecRetention
   * @return biospecRetention
  **/
  @Schema(description = "")
  public BiospecRetentionEnum getBiospecRetention() {
    return biospecRetention;
  }

  public void setBiospecRetention(BiospecRetentionEnum biospecRetention) {
    this.biospecRetention = biospecRetention;
  }

  public PrivateTrial biospecDescr(String biospecDescr) {
    this.biospecDescr = biospecDescr;
    return this;
  }

   /**
   * Get biospecDescr
   * @return biospecDescr
  **/
  @Schema(description = "")
  public String getBiospecDescr() {
    return biospecDescr;
  }

  public void setBiospecDescr(String biospecDescr) {
    this.biospecDescr = biospecDescr;
  }

  public PrivateTrial eligibility(Eligibility eligibility) {
    this.eligibility = eligibility;
    return this;
  }

   /**
   * Get eligibility
   * @return eligibility
  **/
  @Schema(description = "")
  public Eligibility getEligibility() {
    return eligibility;
  }

  public void setEligibility(Eligibility eligibility) {
    this.eligibility = eligibility;
  }

  public PrivateTrial overallOfficial(java.util.List<Contact> overallOfficial) {
    this.overallOfficial = overallOfficial;
    return this;
  }

  public PrivateTrial addOverallOfficialItem(Contact overallOfficialItem) {
    if (this.overallOfficial == null) {
      this.overallOfficial = new java.util.ArrayList<>();
    }
    this.overallOfficial.add(overallOfficialItem);
    return this;
  }

   /**
   * Person responsible for the overall scientific leadership of the protocol, including study principal investigator.
   * @return overallOfficial
  **/
  @Schema(description = "Person responsible for the overall scientific leadership of the protocol, including study principal investigator.")
  public java.util.List<Contact> getOverallOfficial() {
    return overallOfficial;
  }

  public void setOverallOfficial(java.util.List<Contact> overallOfficial) {
    this.overallOfficial = overallOfficial;
  }

  public PrivateTrial overallContact(Contact overallContact) {
    this.overallContact = overallContact;
    return this;
  }

   /**
   * Get overallContact
   * @return overallContact
  **/
  @Schema(description = "")
  public Contact getOverallContact() {
    return overallContact;
  }

  public void setOverallContact(Contact overallContact) {
    this.overallContact = overallContact;
  }

  public PrivateTrial overallContactBackup(Contact overallContactBackup) {
    this.overallContactBackup = overallContactBackup;
    return this;
  }

   /**
   * Get overallContactBackup
   * @return overallContactBackup
  **/
  @Schema(description = "")
  public Contact getOverallContactBackup() {
    return overallContactBackup;
  }

  public void setOverallContactBackup(Contact overallContactBackup) {
    this.overallContactBackup = overallContactBackup;
  }

  public PrivateTrial location(java.util.List<Facility> location) {
    this.location = location;
    return this;
  }

  public PrivateTrial addLocationItem(Facility locationItem) {
    if (this.location == null) {
      this.location = new java.util.ArrayList<>();
    }
    this.location.add(locationItem);
    return this;
  }

   /**
   * Information about the sites offering this trial.
   * @return location
  **/
  @Schema(description = "Information about the sites offering this trial.")
  public java.util.List<Facility> getLocation() {
    return location;
  }

  public void setLocation(java.util.List<Facility> location) {
    this.location = location;
  }

  public PrivateTrial locationCountries(java.util.List<String> locationCountries) {
    this.locationCountries = locationCountries;
    return this;
  }

  public PrivateTrial addLocationCountriesItem(String locationCountriesItem) {
    if (this.locationCountries == null) {
      this.locationCountries = new java.util.ArrayList<>();
    }
    this.locationCountries.add(locationCountriesItem);
    return this;
  }

   /**
   * Countries with sites offering this trial.
   * @return locationCountries
  **/
  @Schema(description = "Countries with sites offering this trial.")
  public java.util.List<String> getLocationCountries() {
    return locationCountries;
  }

  public void setLocationCountries(java.util.List<String> locationCountries) {
    this.locationCountries = locationCountries;
  }

  public PrivateTrial link(String link) {
    this.link = link;
    return this;
  }

   /**
   * URL to institution (if private) or registry listing of this trial.
   * @return link
  **/
  @Schema(description = "URL to institution (if private) or registry listing of this trial.")
  public String getLink() {
    return link;
  }

  public void setLink(String link) {
    this.link = link;
  }

  public PrivateTrial reference(java.util.List<Reference> reference) {
    this.reference = reference;
    return this;
  }

  public PrivateTrial addReferenceItem(Reference referenceItem) {
    if (this.reference == null) {
      this.reference = new java.util.ArrayList<>();
    }
    this.reference.add(referenceItem);
    return this;
  }

   /**
   * Reference publications pertaining to this trial.
   * @return reference
  **/
  @Schema(description = "Reference publications pertaining to this trial.")
  public java.util.List<Reference> getReference() {
    return reference;
  }

  public void setReference(java.util.List<Reference> reference) {
    this.reference = reference;
  }

  public PrivateTrial verificationDate(OffsetDateTime verificationDate) {
    this.verificationDate = verificationDate;
    return this;
  }

   /**
   * The date on which the responsible party last verified the clinical study information in the entire ClinicalTrials.gov record for the clinical study, even if no additional or updated information is being submitted.
   * @return verificationDate
  **/
  @Schema(description = "The date on which the responsible party last verified the clinical study information in the entire ClinicalTrials.gov record for the clinical study, even if no additional or updated information is being submitted.")
  public OffsetDateTime getVerificationDate() {
    return verificationDate;
  }

  public void setVerificationDate(OffsetDateTime verificationDate) {
    this.verificationDate = verificationDate;
  }

  public PrivateTrial studyFirstSubmitted(OffsetDateTime studyFirstSubmitted) {
    this.studyFirstSubmitted = studyFirstSubmitted;
    return this;
  }

   /**
   * The date on which the study sponsor or investigator first submitted a study record to the trial registry.
   * @return studyFirstSubmitted
  **/
  @Schema(description = "The date on which the study sponsor or investigator first submitted a study record to the trial registry.")
  public OffsetDateTime getStudyFirstSubmitted() {
    return studyFirstSubmitted;
  }

  public void setStudyFirstSubmitted(OffsetDateTime studyFirstSubmitted) {
    this.studyFirstSubmitted = studyFirstSubmitted;
  }

  public PrivateTrial studyFirstPosted(OffsetDateTime studyFirstPosted) {
    this.studyFirstPosted = studyFirstPosted;
    return this;
  }

   /**
   * The date on which the study was first made public on trial registry.
   * @return studyFirstPosted
  **/
  @Schema(description = "The date on which the study was first made public on trial registry.")
  public OffsetDateTime getStudyFirstPosted() {
    return studyFirstPosted;
  }

  public void setStudyFirstPosted(OffsetDateTime studyFirstPosted) {
    this.studyFirstPosted = studyFirstPosted;
  }

  public PrivateTrial lastUpdatePosted(OffsetDateTime lastUpdatePosted) {
    this.lastUpdatePosted = lastUpdatePosted;
    return this;
  }

   /**
   * The most recent date that any information was updated for this trial.
   * @return lastUpdatePosted
  **/
  @Schema(description = "The most recent date that any information was updated for this trial.")
  public OffsetDateTime getLastUpdatePosted() {
    return lastUpdatePosted;
  }

  public void setLastUpdatePosted(OffsetDateTime lastUpdatePosted) {
    this.lastUpdatePosted = lastUpdatePosted;
  }

  public PrivateTrial keyword(java.util.List<String> keyword) {
    this.keyword = keyword;
    return this;
  }

  public PrivateTrial addKeywordItem(String keywordItem) {
    if (this.keyword == null) {
      this.keyword = new java.util.ArrayList<>();
    }
    this.keyword.add(keywordItem);
    return this;
  }

   /**
   * Words or phrases that best describe the protocol. Keywords help users find studies in the database. Use NLM&#x27;s Medical Subject Heading (MeSH)-controlled vocabulary terms where appropriate. Be as specific and precise as possible.
   * @return keyword
  **/
  @Schema(description = "Words or phrases that best describe the protocol. Keywords help users find studies in the database. Use NLM's Medical Subject Heading (MeSH)-controlled vocabulary terms where appropriate. Be as specific and precise as possible.")
  public java.util.List<String> getKeyword() {
    return keyword;
  }

  public void setKeyword(java.util.List<String> keyword) {
    this.keyword = keyword;
  }

  public PrivateTrial responsibleParty(java.util.List<ResponsibleParty> responsibleParty) {
    this.responsibleParty = responsibleParty;
    return this;
  }

  public PrivateTrial addResponsiblePartyItem(ResponsibleParty responsiblePartyItem) {
    if (this.responsibleParty == null) {
      this.responsibleParty = new java.util.ArrayList<>();
    }
    this.responsibleParty.add(responsiblePartyItem);
    return this;
  }

   /**
   * The entities and individuals responsible for this trial.
   * @return responsibleParty
  **/
  @Schema(description = "The entities and individuals responsible for this trial.")
  public java.util.List<ResponsibleParty> getResponsibleParty() {
    return responsibleParty;
  }

  public void setResponsibleParty(java.util.List<ResponsibleParty> responsibleParty) {
    this.responsibleParty = responsibleParty;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PrivateTrial privateTrial = (PrivateTrial) o;
    return Objects.equals(this.institutionId, privateTrial.institutionId) &&
        Objects.equals(this.institutionStudyId, privateTrial.institutionStudyId) &&
        Objects.equals(this.registryId, privateTrial.registryId) &&
        Objects.equals(this.briefTitle, privateTrial.briefTitle) &&
        Objects.equals(this.acronym, privateTrial.acronym) &&
        Objects.equals(this.officialTitle, privateTrial.officialTitle) &&
        Objects.equals(this.sponsors, privateTrial.sponsors) &&
        Objects.equals(this.source, privateTrial.source) &&
        Objects.equals(this.oversight, privateTrial.oversight) &&
        Objects.equals(this.briefSummary, privateTrial.briefSummary) &&
        Objects.equals(this.detailedDescription, privateTrial.detailedDescription) &&
        Objects.equals(this.status, privateTrial.status) &&
        Objects.equals(this.startDate, privateTrial.startDate) &&
        Objects.equals(this.completionDate, privateTrial.completionDate) &&
        Objects.equals(this.phase, privateTrial.phase) &&
        Objects.equals(this.studyType, privateTrial.studyType) &&
        Objects.equals(this.hasExpandedAccess, privateTrial.hasExpandedAccess) &&
        Objects.equals(this.expandedAccess, privateTrial.expandedAccess) &&
        Objects.equals(this.studyDesign, privateTrial.studyDesign) &&
        Objects.equals(this.primaryOutcome, privateTrial.primaryOutcome) &&
        Objects.equals(this.secondaryOutcome, privateTrial.secondaryOutcome) &&
        Objects.equals(this.otherOutcome, privateTrial.otherOutcome) &&
        Objects.equals(this.numberOfArms, privateTrial.numberOfArms) &&
        Objects.equals(this.numberOfGroups, privateTrial.numberOfGroups) &&
        Objects.equals(this.enrollment, privateTrial.enrollment) &&
        Objects.equals(this.condition, privateTrial.condition) &&
        Objects.equals(this.armGroup, privateTrial.armGroup) &&
        Objects.equals(this.intervention, privateTrial.intervention) &&
        Objects.equals(this.biospecRetention, privateTrial.biospecRetention) &&
        Objects.equals(this.biospecDescr, privateTrial.biospecDescr) &&
        Objects.equals(this.eligibility, privateTrial.eligibility) &&
        Objects.equals(this.overallOfficial, privateTrial.overallOfficial) &&
        Objects.equals(this.overallContact, privateTrial.overallContact) &&
        Objects.equals(this.overallContactBackup, privateTrial.overallContactBackup) &&
        Objects.equals(this.location, privateTrial.location) &&
        Objects.equals(this.locationCountries, privateTrial.locationCountries) &&
        Objects.equals(this.link, privateTrial.link) &&
        Objects.equals(this.reference, privateTrial.reference) &&
        Objects.equals(this.verificationDate, privateTrial.verificationDate) &&
        Objects.equals(this.studyFirstSubmitted, privateTrial.studyFirstSubmitted) &&
        Objects.equals(this.studyFirstPosted, privateTrial.studyFirstPosted) &&
        Objects.equals(this.lastUpdatePosted, privateTrial.lastUpdatePosted) &&
        Objects.equals(this.keyword, privateTrial.keyword) &&
        Objects.equals(this.responsibleParty, privateTrial.responsibleParty);
  }

  @Override
  public int hashCode() {
    return Objects.hash(institutionId, institutionStudyId, registryId, briefTitle, acronym, officialTitle, sponsors, source, oversight, briefSummary, detailedDescription, status, startDate, completionDate, phase, studyType, hasExpandedAccess, expandedAccess, studyDesign, primaryOutcome, secondaryOutcome, otherOutcome, numberOfArms, numberOfGroups, enrollment, condition, armGroup, intervention, biospecRetention, biospecDescr, eligibility, overallOfficial, overallContact, overallContactBackup, location, locationCountries, link, reference, verificationDate, studyFirstSubmitted, studyFirstPosted, lastUpdatePosted, keyword, responsibleParty);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PrivateTrial {\n");
    
    sb.append("    institutionId: ").append(toIndentedString(institutionId)).append("\n");
    sb.append("    institutionStudyId: ").append(toIndentedString(institutionStudyId)).append("\n");
    sb.append("    registryId: ").append(toIndentedString(registryId)).append("\n");
    sb.append("    briefTitle: ").append(toIndentedString(briefTitle)).append("\n");
    sb.append("    acronym: ").append(toIndentedString(acronym)).append("\n");
    sb.append("    officialTitle: ").append(toIndentedString(officialTitle)).append("\n");
    sb.append("    sponsors: ").append(toIndentedString(sponsors)).append("\n");
    sb.append("    source: ").append(toIndentedString(source)).append("\n");
    sb.append("    oversight: ").append(toIndentedString(oversight)).append("\n");
    sb.append("    briefSummary: ").append(toIndentedString(briefSummary)).append("\n");
    sb.append("    detailedDescription: ").append(toIndentedString(detailedDescription)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    startDate: ").append(toIndentedString(startDate)).append("\n");
    sb.append("    completionDate: ").append(toIndentedString(completionDate)).append("\n");
    sb.append("    phase: ").append(toIndentedString(phase)).append("\n");
    sb.append("    studyType: ").append(toIndentedString(studyType)).append("\n");
    sb.append("    hasExpandedAccess: ").append(toIndentedString(hasExpandedAccess)).append("\n");
    sb.append("    expandedAccess: ").append(toIndentedString(expandedAccess)).append("\n");
    sb.append("    studyDesign: ").append(toIndentedString(studyDesign)).append("\n");
    sb.append("    primaryOutcome: ").append(toIndentedString(primaryOutcome)).append("\n");
    sb.append("    secondaryOutcome: ").append(toIndentedString(secondaryOutcome)).append("\n");
    sb.append("    otherOutcome: ").append(toIndentedString(otherOutcome)).append("\n");
    sb.append("    numberOfArms: ").append(toIndentedString(numberOfArms)).append("\n");
    sb.append("    numberOfGroups: ").append(toIndentedString(numberOfGroups)).append("\n");
    sb.append("    enrollment: ").append(toIndentedString(enrollment)).append("\n");
    sb.append("    condition: ").append(toIndentedString(condition)).append("\n");
    sb.append("    armGroup: ").append(toIndentedString(armGroup)).append("\n");
    sb.append("    intervention: ").append(toIndentedString(intervention)).append("\n");
    sb.append("    biospecRetention: ").append(toIndentedString(biospecRetention)).append("\n");
    sb.append("    biospecDescr: ").append(toIndentedString(biospecDescr)).append("\n");
    sb.append("    eligibility: ").append(toIndentedString(eligibility)).append("\n");
    sb.append("    overallOfficial: ").append(toIndentedString(overallOfficial)).append("\n");
    sb.append("    overallContact: ").append(toIndentedString(overallContact)).append("\n");
    sb.append("    overallContactBackup: ").append(toIndentedString(overallContactBackup)).append("\n");
    sb.append("    location: ").append(toIndentedString(location)).append("\n");
    sb.append("    locationCountries: ").append(toIndentedString(locationCountries)).append("\n");
    sb.append("    link: ").append(toIndentedString(link)).append("\n");
    sb.append("    reference: ").append(toIndentedString(reference)).append("\n");
    sb.append("    verificationDate: ").append(toIndentedString(verificationDate)).append("\n");
    sb.append("    studyFirstSubmitted: ").append(toIndentedString(studyFirstSubmitted)).append("\n");
    sb.append("    studyFirstPosted: ").append(toIndentedString(studyFirstPosted)).append("\n");
    sb.append("    lastUpdatePosted: ").append(toIndentedString(lastUpdatePosted)).append("\n");
    sb.append("    keyword: ").append(toIndentedString(keyword)).append("\n");
    sb.append("    responsibleParty: ").append(toIndentedString(responsibleParty)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
